name: Tests
on:
  - pull_request
  - workflow_dispatch
env:
  PYTHON_VERSION: "3.11"
  POETRY_VERSION: "1.4.2"
  POETRY_URL: https://install.python-poetry.org

jobs:
  # Label
  Runner-job-of-Tests-with-DB:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgis/postgis
        env:
          POSTGRES_USER: user
          POSTGRES_PASSWORD: password
          POSTGRES_DB: database
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          # Maps tcp port 5432 on service container to the host
          - 5432:5432

    steps:
      - name: Give GH Actions access to django-simba repo
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: |
            ${{ secrets.EFLIPS_KEY }}
            ${{ secrets.EFLIPS_DEPOT_KEY }}
            ${{ secrets.DJANGO_SIMBA_KEY }}
      # Downloads a copy of the code in your repository before running CI tests
      - name: Check out code
        uses: actions/checkout@v3
      - name: Set Up Gdal
        run: |
          sudo apt-get update
          sudo apt-get install gdal-bin
          echo ogrinfo --version

      # TODO ben√∂tigen wir Django und Chrom?
      #- name: setup-chromedriver
      #  uses: nanasess/setup-chromedriver@v2.2.0

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v3
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - name: Install poetry
        run: |
          python -m pip install --upgrade pip
          pip install poetry
          poetry config experimental.system-git-client true
      - name: Install Dependencies
        run: |
          poetry install --no-root
      - name: Run Tests
        run:
          poetry run pytest --junit-xml=test-results.xml #test
        env:
          # To make sure that the tests can find the eflips package
          PYTHONPATH: "tests:."
          DJANGO_SECRET_KEY: ${{ secrets.SECRET_KEY }}
          DJANGO_DEBUG: True
          # Replace with your own database info
          DATABASE_URL: postgis://user:password@localhost/database
          CELERY_USE: False
          DJANGO_SETTINGS_MODULE: tests.api.djangosettings
          # The hostname used to communicate with the PostgreSQL service container
          POSTGRES_HOST: localhost
          # The default PostgreSQL port
          POSTGRES_PORT: 5432
      - name: Surface failing tests
        if: always()
        uses: pmeier/pytest-results-action@main
        with:
          # A list of JUnit XML files, directories containing the former, and wildcard
          # patterns to process.
          # See @actions/glob for supported patterns.
          path: test-results.xml
      
          # Add a summary of the results at the top of the report
          # Default: true
          summary: true
      
          # Select which results should be included in the report.
          # Follows the same syntax as
          # `pytest -r`
          # Default: fEX
          display-options: fEX
      
          # Fail the workflow if no JUnit XML was found.
          # Default: true
          fail-on-empty: true
      
      
      
