:py:mod:`depot.layout_opt.util`
===============================

.. py:module:: depot.layout_opt.util

.. autoapi-nested-parse::

   Utility functions.



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   depot.layout_opt.util.StoppingCriteria



Functions
~~~~~~~~~

.. autoapisummary::

   depot.layout_opt.util.share_nonzero
   depot.layout_opt.util.attrbased_set



.. py:function:: share_nonzero(arr)

   Share of elements that are unequal to zero in *arr*.


.. py:class:: StoppingCriteria


   Stopping utilities for optimization loops of an evolutionary algorithm.
       

   .. py:method:: select(*args)

      Select the stopping criteria. Pass at least one stopping criteria
      method name as str. The same method cannot be selected twice.


   .. py:method:: check(*args, **kwargs)

      Return True if any of the selected stopping criteria returns True.
      Pass parameters as kwargs based on stopping criteria requirements.


   .. py:method:: max_gen_reached(g, ngen, *args, **kwargs)
      :staticmethod:

      Return True if *g* is higher than or equal to *ngen*.


   .. py:method:: max_fit_reached(hof, maxfitness, *args, **kwargs)
      :staticmethod:

      Return True if *maxfitness* is reached.

      hof: [deap.tools.HallOfFame]
      maxfitness: [deap.creator.Fitness...]


   .. py:method:: no_improvement(g, hof, improvement_interval, *args, **kwargs)

      Return True if there has been no fitness improvement for the last
      *improvement_interval* generations.


   .. py:method:: feasible_found(pop, feasible, *args, **kwargs)
      :staticmethod:

      Return True if there is a feasible individual in the current
      population.

      pop: [list] population
      feasible: [function] returning the feasibility of an individual


   .. py:method:: higher_than(value, limit, *args, **kwargs)
      :staticmethod:

      Return True if *value* is higher than *limit*.
              



.. py:function:: attrbased_set(seq, attr)

   Determine unique and duplicate objects in *seq* based on the comparison
   of attribute *attr*.


