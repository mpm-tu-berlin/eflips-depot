:py:mod:`depot.layout_opt.packing`
==================================

.. py:module:: depot.layout_opt.packing

.. autoapi-nested-parse::

   Utilities for defining a depot layout as a packing problem and solving it.



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   depot.layout_opt.packing.Rectangle
   depot.layout_opt.packing.RectangleWithInner
   depot.layout_opt.packing.RectangleWithRotatableInner
   depot.layout_opt.packing.RectangleWithRotatedDoubleRowInner
   depot.layout_opt.packing.Available
   depot.layout_opt.packing.Bin
   depot.layout_opt.packing.DistanceRectangle
   depot.layout_opt.packing.BinWithDistances
   depot.layout_opt.packing.DistanceLeft
   depot.layout_opt.packing.DistanceBottom
   depot.layout_opt.packing.DistanceRight
   depot.layout_opt.packing.DistanceTop
   depot.layout_opt.packing.RectangleWithDistances
   depot.layout_opt.packing.VisuDataLine
   depot.layout_opt.packing.VisuDataDirectSingleRow
   depot.layout_opt.packing.VisuDataDirectSingleRow_90
   depot.layout_opt.packing.VisuDataDirectDoubleRow
   depot.layout_opt.packing.Progressprinter



Functions
~~~~~~~~~

.. autoapisummary::

   depot.layout_opt.packing.fits_into
   depot.layout_opt.packing.xintersect
   depot.layout_opt.packing.yintersect
   depot.layout_opt.packing.intersect
   depot.layout_opt.packing.contains
   depot.layout_opt.packing.contains_point
   depot.layout_opt.packing.alab_arib
   depot.layout_opt.packing.alit_arat
   depot.layout_opt.packing.alab_ilat
   depot.layout_opt.packing.irab_arat
   depot.layout_opt.packing.draw_rectangles
   depot.layout_opt.packing.draw_rectangles_newplot
   depot.layout_opt.packing.packem
   depot.layout_opt.packing.packem_with_distances
   depot.layout_opt.packing.test_packing
   depot.layout_opt.packing.test_packing_with_distances
   depot.layout_opt.packing.tl



Attributes
~~~~~~~~~~

.. autoapisummary::

   depot.layout_opt.packing.language
   depot.layout_opt.packing.WIDTH
   depot.layout_opt.packing.LENGTH
   depot.layout_opt.packing.WIDTH_SAFE
   depot.layout_opt.packing.LENGTH_SAFE
   depot.layout_opt.packing.ANGLE_DIRECT
   depot.layout_opt.packing.DIRECT_DISTANCE_A
   depot.layout_opt.packing.DIRECT_DISTANCE_B
   depot.layout_opt.packing.LINE_DISTANCE_A
   depot.layout_opt.packing.LINE_DISTANCE_B
   depot.layout_opt.packing.EDGE_DISTANCE_A
   depot.layout_opt.packing.EDGE_DISTANCE_B
   depot.layout_opt.packing.lang_dict


.. py:data:: language
   :value: 'de'

   

.. py:data:: WIDTH
   :value: 2.55

   

.. py:data:: LENGTH
   :value: 12

   

.. py:data:: WIDTH_SAFE
   :value: 3.55

   

.. py:data:: LENGTH_SAFE
   :value: 12.5

   

.. py:data:: ANGLE_DIRECT
   :value: 45

   

.. py:data:: DIRECT_DISTANCE_A
   :value: 8

   

.. py:data:: DIRECT_DISTANCE_B
   :value: 0

   

.. py:data:: LINE_DISTANCE_A
   :value: 0

   

.. py:data:: LINE_DISTANCE_B
   :value: 19.25

   

.. py:data:: EDGE_DISTANCE_A
   :value: 8

   

.. py:data:: EDGE_DISTANCE_B
   :value: 15

   

.. py:exception:: ValidationError(message)


   Bases: :py:obj:`Exception`

   Common base class for all non-exit exceptions.


.. py:class:: Rectangle(a, b, angle=0, x=0, y=0, fill=True, color='black', alpha=1.0, linestyle='-', **kwargs)


   Rectangle representation as basis for subclasses.

   a and b: width and height
   x and y: coordinates of bottom left corner

   .. py:property:: x


   .. py:property:: y


   .. py:property:: A


   .. py:property:: x_left

      Return x of the left side. Must be unrotated.


   .. py:property:: x_right

      Return x of the right side. Must be unrotated.


   .. py:property:: y_top

      Return y of the top side. Must be unrotated.


   .. py:property:: y_bottom

      Return y of the bottom side. Must be unrotated.


   .. py:property:: x_tr

      Return x of the top right corner. Must be unrotated.


   .. py:property:: y_tr

      Return y of the top right corner. Must be unrotated.


   .. py:property:: x_tl

      Return x of the top left corner. Must be unrotated.


   .. py:property:: y_tl

      Return y of the top left corner. Must be unrotated.


   .. py:property:: x_br

      Return x of the bottom right corner. Must be unrotated.


   .. py:property:: y_br

      Return y of the bottom right corner. Must be unrotated.


   .. py:property:: x_center

      Return x of the center. Must be unrotated.


   .. py:property:: y_center

      Return y of the center. Must be unrotated.


   .. py:method:: __repr__()

      Return repr(self).



.. py:function:: fits_into(r1, r2)

   Return True if rectangle r1 is smaller or equal than rectangle r2 in
   both dimensions.


.. py:function:: xintersect(r1, r2)

   Return True if unrotated rectangles r1 and r2 intersect in x direction. 
   Same value is not considered intersection.


.. py:function:: yintersect(r1, r2)

   Return True if unrotated rectangles r1 and r2 intersect in y direction. 
   Same value is not considered intersection.


.. py:function:: intersect(r1, r2)

   Return True if unrotated rectangles r1 and r2 intersect. Same value is 
   not considered intersection.


.. py:function:: contains(r1, r2)

   Return True if rectangle r1 completely encloses rectangle r2. Must be 
   unrotated.


.. py:function:: contains_point(r, p)

   Return True if rectangle r contains point p. Must be unrotated.


.. py:class:: RectangleWithInner(m, n, count_inner, x=0, y=0, **kwargs)


   Bases: :py:obj:`Rectangle`

   Rectangle containing two or more identical rectangles.
   Inner rectangles are stacked in the direction of increasing y.

   m, n: [int or float] a, b of the inner rectangles

   .. py:property:: x


   .. py:property:: y


   .. py:property:: A_inner

      Return the total space of inner rectangles.


   .. py:property:: util_rate


   .. py:method:: x_inner(*args)

      Return the x coordinate of inner rectangles (same for all).


   .. py:method:: y_inner(index)

      Return the y coordinate of the inner rectangle with *index*
      (starting at 0).



.. py:class:: RectangleWithRotatableInner(m, n, count_inner=1, angle_inner=45, x=0, y=0, **kwargs)


   Bases: :py:obj:`Rectangle`

   Rectangle containing one or more identical rotatable rectangles.
   Inner rectangles are stacked in the direction of increasing y.

   Parameters:
   m, n: [int or float] a, b of the inner rectangles

   Attributes:
   inner: [Rectangle] bottom inner rectangle


   .. py:property:: x


   .. py:property:: y


   .. py:property:: A_inner

      Return the total space of inner rectangles.


   .. py:property:: util_rate


   .. py:method:: rotate_inner(angle)

      Set the rotation of the inner rectangles and update the parameters
      of self.

      A reference drawing for names used in this method such as m, AQ is
      located at depot_layout_opt/doc/direct_details.pdf.

      angle: [int or float] value between -75 and 75


   .. py:method:: x_inner(*args)

      Return the x coordinate of inner rectangles (same for all).


   .. py:method:: y_inner(index)

      Return the y coordinate of the inner rectangle with *index*
      (starting at 0).



.. py:class:: RectangleWithRotatedDoubleRowInner(m, n, count_inner=2, x=0, y=0, **kwargs)


   Bases: :py:obj:`Rectangle`

   Rectangle containing two or more identical sized rectangles that
   are rotated by 45Â° and arranged in a double row.

   Parameters:
   m, n: [int or float] a, b of the inner rectangles

   Attributes:
   inner: [Rectangle] bottom inner rectangle


   .. py:property:: x


   .. py:property:: y


   .. py:property:: A_inner

      Return the total space of inner rectangles.


   .. py:property:: util_rate


   .. py:method:: x_inner(index)

      Return the x coordinate of inner rectangle with *index*. Indexing
      starts at zero, alternating left and right from the bottom left towards
      the top.


   .. py:method:: y_inner(index)

      Return the y coordinate of inner rectangle with *index*. Indexing
      starts at zero, alternating left and right from the bottom left towards
      the top.



.. py:class:: Available(a, b, x=0, y=0, fill=False, color='black', alpha=0.7, linestyle='--')


   Bases: :py:obj:`Rectangle`

   Rectangle with default parameters to represent available space in
   a bin.


.. py:function:: alab_arib(av, item)

   Return a new [Available] spanning from (av.x_left, av.y_bottom) to
   (av.x_right, item.y_bottom).


.. py:function:: alit_arat(av, item)

   Return a new [Available] spanning from (av.x_left, item.y_top) to
   (av.x_right, av.y_top).


.. py:function:: alab_ilat(av, item)

   Return a new [Available] spanning from (av.x_left, av.y_bottom) to
   (item.x_left, av.y_top).


.. py:function:: irab_arat(av, item)

   Return a new [Available] spanning from (item.x_right, av.y_bottom) to
   (av.x_right, av.y_top).


.. py:class:: Bin(a, b, record_history=True, fill=False)


   Bases: :py:obj:`Rectangle`

   Rectangular container with best-fit-decreasing algorithm for rectangle
   packing.

   .. py:property:: valid

      Return True if none of the rectangles in self.packed_items
      intersect, else return False.


   .. py:property:: feasible

      Return the result of the packing attempt as boolean. None until
      self.pack is called.


   .. py:property:: count_inner

      Return the total number of inner rectangles of items.


   .. py:property:: A_inner

      Return the total space of items in unpacked state. Excludes space
      for distances (if applicable).


   .. py:property:: util_rate

      Percentage of the total bin space occupied by packed items.


   .. py:property:: precheck_passed

      Return the result of the precheck as boolean. None until
      self.precheck is called.


   .. py:method:: precheck()

      Quick checks applicable before packing to detect if items fit.


   .. py:method:: pack()

      Try to distribute all items into self so that none intersect and
      return True if successful, else return False.


   .. py:method:: put(item)

      Call try_put to determine if item fits into self. If successful,
      execute the action and return True, else False.


   .. py:method:: try_put(item)

      Determine if there is valid available space for item. Return (True,
      the available space rectangle) if yes, else (False, None). x and y of
      item may be manipulated regardless of the
      result.


   .. py:method:: update_availables(item)

      Update availables after packing *item*.


   .. py:method:: case_1(av, item)
      :staticmethod:

      Case 1 of splitting av into smaller rectangles.


   .. py:method:: case_2(av, item)
      :staticmethod:


   .. py:method:: case_3(av, item)
      :staticmethod:


   .. py:method:: case_4(av, item)
      :staticmethod:


   .. py:method:: case_5(av, item)
      :staticmethod:


   .. py:method:: case_6(av, item)
      :staticmethod:


   .. py:method:: case_7(av, item)
      :staticmethod:


   .. py:method:: case_8(av, item)
      :staticmethod:


   .. py:method:: case_9(av, item)
      :staticmethod:


   .. py:method:: case_10(av, item)
      :staticmethod:


   .. py:method:: case_11(av, item)
      :staticmethod:


   .. py:method:: case_12(av, item)
      :staticmethod:


   .. py:method:: case_13(av, item)
      :staticmethod:


   .. py:method:: case_14(av, item)
      :staticmethod:


   .. py:method:: case_15(av, item)
      :staticmethod:


   .. py:method:: case_16(av, item)
      :staticmethod:


   .. py:method:: repack()

      Reset packing values and pack again.


   .. py:method:: draw()

      Plot self.packed_items.


   .. py:method:: save_drawing(filename, formats=('pdf', ), confirm=True, dpi=None, show=False, **kwargs)

      Save what self.draw shows.

      filename: [str] including path, excluding extension. Existing files
          with the same name are overwritten without confirmation prompt.
      formats: [tuple] of file extensions [str]
      dpi: Parameter of plt.savefig()
      show: [bool] if False, the fig is closed automatically


   .. py:method:: animate()


   .. py:method:: _animate(draw_distances)

      Based on https://stackoverflow.com/a/49382421


   .. py:method:: save_animation(filename, confirm=True, fps=1.5, bitrate=1800, **kwargs)

      Save what self.animate shows as .mp4.

      filename: [str] including path, excluding extension. Existing files
          with the same name are overwritten without confirmation prompt.

      Accepts arguments for ffmpeg writer init and FuncAnimation.save as
      kwargs.



.. py:class:: DistanceRectangle(a, b, x=0, y=0, fill=True, color='grey', alpha=0.5, linestyle=':')


   Bases: :py:obj:`Rectangle`

   Rectangle with default parameters to represent a buffer distance in
   packing with distances.


.. py:class:: BinWithDistances(a, b, record_history=True)


   Bases: :py:obj:`Bin`

   Rectangular container with best-fit-decreasing-algorithm for rectangle
   packing with optional buffer distances between items as well as between
   items and the container edges.

   Distance handling based on https://doi.org/10.1051/ro/2012007

   .. py:method:: try_put(item)

      Determine if there is valid available space with respect to buffer
      distances for item. Return (True, the Available rectangle) if
      yes, else (False, None). x and y of item may be manipulated regardless
      of the result.


   .. py:method:: case_16(av, item)
      :staticmethod:


   .. py:method:: draw()

      Plot self.packed_items and the distances.


   .. py:method:: animate()



.. py:class:: DistanceLeft(a, item)


   Bases: :py:obj:`DistanceRectangle`

   Buffer rectangle on the outer left side of the *item* rectangle.

   .. py:property:: b


   .. py:property:: x


   .. py:property:: y



.. py:class:: DistanceBottom(b, item)


   Bases: :py:obj:`DistanceRectangle`

   Buffer rectangle on the outer bottom side of the *item* rectangle.
       

   .. py:property:: a


   .. py:property:: x


   .. py:property:: y



.. py:class:: DistanceRight(a, item)


   Bases: :py:obj:`DistanceRectangle`

   Buffer rectangle on the outer right side of the *item* rectangle.

   .. py:property:: b


   .. py:property:: x


   .. py:property:: y



.. py:class:: DistanceTop(b, item)


   Bases: :py:obj:`DistanceRectangle`

   Buffer rectangle on the outer top side of the *item* rectangle.

   .. py:property:: a


   .. py:property:: x


   .. py:property:: y



.. py:class:: RectangleWithDistances(a=0, b=0, x=0, y=0, d_l=0, d_b=0, d_r=0, d_t=0, **kwargs)


   Bases: :py:obj:`Rectangle`

   A rectangle that may have a buffer distance at each side. Without 
   rotation.

   Parameters:
   d_l, d_b, d_r, d_t: [int or float] buffer distance at left, bottom, right 
       and top sides.

   .. py:property:: a_with_distances


   .. py:property:: b_with_distances


   .. py:property:: x_with_distances

      When in combination with y_with_distances: this point may intersect
      another shape.


   .. py:property:: y_with_distances

      When in combination with x_with_distances: this point may intersect
      another shape.


   .. py:property:: A_distances

      Return the area covered by distances.


   .. py:property:: A_with_distances

      Return the total area including distances.



.. py:class:: VisuDataLine(m=WIDTH_SAFE, n=LENGTH_SAFE, capacity=2, x=0, y=0, d_l=LINE_DISTANCE_A, d_b=LINE_DISTANCE_B, d_r=LINE_DISTANCE_A, d_t=LINE_DISTANCE_B, text='')


   Bases: :py:obj:`RectangleWithDistances`, :py:obj:`RectangleWithInner`

   Representation of a Line area.

   text: [str] to draw in the center of the rectangle

   .. py:property:: capacity

      Alias of self.count_inner.


   .. py:property:: util_rate_with_distances


   .. py:attribute:: conflict_category
      :value: 2

      


.. py:class:: VisuDataDirectSingleRow(m=LENGTH_SAFE, n=WIDTH_SAFE, angle_inner=45, capacity=1, x=0, y=0, d_l=DIRECT_DISTANCE_A, d_b=DIRECT_DISTANCE_B, d_r=0, d_t=DIRECT_DISTANCE_B, text='')


   Bases: :py:obj:`RectangleWithDistances`, :py:obj:`RectangleWithRotatableInner`

   Representation of a single row direct area.

   angle_inner: makes sense until max. 75 degrees (with 12.5x3.5 slots)
   text: [str] to draw in the center of the rectangle

   .. py:property:: capacity

      Alias of self.count_inner.


   .. py:property:: util_rate_with_distances


   .. py:attribute:: conflict_category
      :value: 3

      


.. py:class:: VisuDataDirectSingleRow_90(m=LENGTH_SAFE, n=WIDTH_SAFE, angle_inner=-45, capacity=1, x=0, y=0, d_l=0, d_b=DIRECT_DISTANCE_B, d_r=DIRECT_DISTANCE_A, d_t=DIRECT_DISTANCE_B, text='')


   Bases: :py:obj:`RectangleWithDistances`, :py:obj:`RectangleWithRotatableInner`

   Representation of a single row direct area.

   angle_inner: makes sense until max. 75 degrees (with 12.5x3.5 slots)
   text: [str] to draw in the center of the rectangle

   .. py:property:: capacity

      Alias of self.count_inner.


   .. py:property:: util_rate_with_distances


   .. py:attribute:: conflict_category
      :value: 1

      


.. py:class:: VisuDataDirectDoubleRow(m=LENGTH_SAFE, n=WIDTH_SAFE, capacity=1, x=0, y=0, d_l=DIRECT_DISTANCE_A, d_b=DIRECT_DISTANCE_B, d_r=DIRECT_DISTANCE_A, d_t=DIRECT_DISTANCE_B, text='')


   Bases: :py:obj:`RectangleWithDistances`, :py:obj:`RectangleWithRotatedDoubleRowInner`

   Representation of a double row direct area.

   text: [str] to draw in the center of the rectangle

   .. py:property:: capacity

      Alias of self.count_inner.


   .. py:property:: util_rate_with_distances


   .. py:attribute:: conflict_category
      :value: 4

      


.. py:function:: draw_rectangles(rectangles, draw_distances=True)

   rectangles: [iterable] of Rectangle oder subclass objects.


.. py:function:: draw_rectangles_newplot(rectangles, xlim=(0, 100), ylim=(0, 100), draw_distances=True)

   Initialize a new plot and draw rectangles.

   rectangles: sequence of Rectangle oder subclass objects
   xlim: [tuple] of x min and max
   ylim: [tuple] of y min and max


.. py:function:: packem(n=10)

   Demo for packing without distances.


.. py:function:: packem_with_distances(n=5)

   Demo for packing with distances.


.. py:class:: Progressprinter(until, interval=0.1)


   .. py:method:: notify(now)



.. py:function:: test_packing(tries=250, nmax=30)

   Test for packing without distances.


.. py:function:: test_packing_with_distances(tries=250, nmax=15)

   Test for packing with distances.


.. py:data:: lang_dict

   

.. py:function:: tl(text)

   Translate *text* using lang_dict.


