:py:mod:`depot.standalone`
==========================

.. py:module:: depot.standalone

.. autoapi-nested-parse::

   Created on Sun Oct  1 12:50:18 2017

   @author: p.mundt, e.lauth

   Complementary components that are necessary for a standalone run of the depot
   simulation.



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   depot.standalone.VehicleGenerator
   depot.standalone.SimpleTrip
   depot.standalone.Timetable
   depot.standalone.ExcelSheetData



Functions
~~~~~~~~~

.. autoapisummary::

   depot.standalone.timetabledata_from_excel
   depot.standalone.timetable_from_timetabledata
   depot.standalone.timetabledata_to_trips



.. py:class:: VehicleGenerator(env)


   Bases: :py:obj:`eflips.depot.depot.BackgroundStore`

   Initialize SimpleVehicle objects at the start of the simulation.

   Attributes:
   items: [list] containing all generated vehicles


   .. py:method:: _complete(depots)

      Preparations that must take place before self.run and simulation
      start, but may not be possible during the depot configuration phase.


   .. py:method:: run(depots)

      Intialize vehicles based on data in eflips settings. Executed and
      completed at simulation start.

      depots: [list] of Depot objects


   .. py:method:: check_arrival()



.. py:class:: SimpleTrip(env, ID, line_name, origin, destination, vehicle_types, std, sta, distance, start_soc=None, end_soc=None, charge_on_track=False)


   Data for one trip outside the depot, from departure until arrival.

   Parameters:
   origin, destination: Depot ID [str] upon init. Is converted to [Depot]
       instance by Timetable
   vehicle_types: [list] of SimpleVehicle.VehicleType as [str] upon import,
       converted to [VehicleType] before simulation start.
   std: [int] scheduled time of departure in total seconds since sim start
   sta: [int] scheduled time of arrival in total seconds since sim start
   distance: [int] total trip distance in km
   start_soc, end_soc: [int or float or None] soc upon departure from and
       arrival at the depot. Must be provided if globalConstants['depot'][
       'consumption_calc_mode'] == 'soc_given'. May be omitted if consumption
       calculation is CR-based.
   charge_on_track: [bool] For the use with globalConstants['depot'][
       'consumption_calc_mode'] == 'soc_given'. If True, opportunity charging
       on track is assumed and start_soc is interpreted as sufficient soc for
       departure and end_soc is interpreted as fixed value upon arrival. If
       False, depot charging is assumed and start_soc and end_soc are used to
       determine the required energy. In this case, start_soc must be higher
       than end_soc. May be omitted if consumption calculation is CR-based.

   Attributes:
   eta: [int] scheduled time of arrival
   atd: [int or None] actual time of departure
   ata: [int or None] actual time of arrival
   vehicle: [SimpleVehicle] assigned to before and after departure
   reserved_for_init: see option prioritize_init_store in globalConstants
   vehicle_from: [str] ID of the area the executing vehicle was located at
       when calling checkout.
   copy_of: [None or SimpleTrip] Is set to SimpleTrip object if trip was
       copied in Timetable.repeat_trips.
   t_match: [None or int] time of matching this trip and a vehicle. If a
       vehicle from a depot's init store is assigned, this attribute stays
       None. If the match changes, only the last matching time is saved.
   got_early_vehicle: [bool] True if the trip was served by a vehicle where
       the battery wasn't fully charged upon departure.
   periodic_trigger_scheduled: [bool] flag to prevent recursion when
       scheduling a dispatch trigger for delayed trips
   ID_orig: [str] ID of trip this trip is a copy from, if not an original


   .. py:property:: ID_orig


   .. py:property:: vehicle_types_str

      Return IDs of self.vehicle_types in a list.


   .. py:property:: vehicle_types_joinedstr

      Return the IDs of self.vehicle_types comma-separated in a single
      string.
      Example returns:
      ['EN'] -> 'EN'
      ['EN', 'DL'] -> 'EN, DL'


   .. py:property:: delay_departure

      Return the departure delay [int] in seconds. Return None until
      scheduled time of departure.


   .. py:property:: delayed_departure

      Return True if the trip is delayed upon departure or False if not.
      Return None until scheduled time of departure.


   .. py:property:: delay_arrival

      Return the arrival delay [int] in seconds. Return None until
      scheduled time of arrival.


   .. py:property:: delayed_arrival

      Return True if the trip is delayed upon arrival or False if not.
      Return None until scheduled time of arrival.


   .. py:property:: duration

      Return the scheduled duration [int] of the trip.


   .. py:property:: actual_duration

      Return the actual duration [int] of the trip. Return None until the
      trip is finished.


   .. py:property:: lead_time_match

      Return the time interval [int] of how early the trip was matched
      with a vehicle. May be negative if the trip is delayed. Return None if
      self.t_match is None.


   .. py:attribute:: delay_event_cls

      Event that succeeds if departure delay occurs. Must be set before 
      calling init to be applied.


   .. py:method:: __repr__()

      Return repr(self).


   .. py:method:: notify_due_departure(t)

      Wait until simulation time *t* and then trigger the depot's
      assignment process if the trip has no vehicle. No action if *t* < now.


   .. py:method:: notify_delay()

      Instantiate self.delay_event_cls if the trip hasn't started one
      second after self.std.



.. py:class:: Timetable(env, trips, days_ahead=2)


   Timetable with a list of SimpleTrip objects from imported data.
   Processes the list of trips and requests matching vehicles from a depot.

   Parameters:
       trips: [list] of SimpleTrip objects. Has to be sorted by departure time
       in ascending order. Only contains trips that are not copies.
   days_ahead: [int] number of days that trips will be issued early. For
       making depot-side planning possible. Should be higher than
       *interval_covered* (in days).

   Attributes:
   trips_issued: [list] of all trips issued to depots. Is empty at the start
       and filled during simulation.
   repetitions: [int] number of times the basic list of trips was
       copied during runtime
   interval_covered: [int] days in seconds that are covered by trips
   all_trips: working [list] of all trips after scheduling including copies
   reservations: {dict} helper variable for the prioritize_init_store option
   fully_reserved: [bool] helper variable for the prioritize_init_store option


   .. py:method:: _complete(depots)

      Completion of trip instantiation that must take place before
      simulation start, but may not be possible during the depot
      configuration phase.


   .. py:method:: run(depots)

      Assure that trips are issued at depots with a time buffer of
      self.days_ahead.
      Infinite loop that checks if there is enough buffer. If not, copy the
      basic list of trips, raise the time values and issue them at the
      depots.
      *depots*: [list] ob Depot objects. Must contain all depots that are
      mentioned as trip attribute.


   .. py:method:: repeat_trips(interval)

      Create a new list of trips with modified time attributes.
      interval: [int] difference in seconds between base and new time
          attributes


   .. py:method:: issue_requests(trips)

      Issue requests for all trips in trips.


   .. py:method:: issue_request(trip)
      :staticmethod:

      Issue request for vehicle at the trip's departure depot. The vehicle 
      has to match *filter*. Waiting time is possible. Called in run().


   .. py:method:: reserve_trips(trips)

      Mark the first trips equal to the amount of matching vehicles to
      be served by the depot's init store.
      Call only if option prioritize_init_store is on.



.. py:class:: ExcelSheetData(filename, sheetname)


   Methods to import an Excel sheet and save its data row-wise to a list.

   data: [list] containing the imported data with one entry per row.


   .. py:method:: import_data()


   .. py:method:: check_for_same_length()

      Return True if all rows have the same length, else False.


   .. py:method:: map_headers()



.. py:function:: timetabledata_from_excel(filename)

   Load data from excel to use for timetable initialization. The loaded
   data can be reused for multiple identical independent timetables.
   Return an ExcelSheetData object.

   filename: [str] name of excel file including path, excluding file
   extension. Example:
       '..\bvg_depot\tripdata\tripData_depot_I_vehicleType_EN_GN_DL'


.. py:function:: timetable_from_timetabledata(env, timetabledata)

   Initialize and return a Timetable instance with SimpleTrip objects
   based on *timetabledata*.

   timetabledata: [ExcelSheetData] from timetabledata_from_excel()


.. py:function:: timetabledata_to_trips(env, timetabledata)

   Convert route data from excel to a list of SimpleTrip objects usable by
   Timetable.

   timetabledata: [ExcelSheetData] object that contains a list of trips. Has
       to be sorted by std in ascending order because run() relies on
       this order. In init(), trips is created from this data.


