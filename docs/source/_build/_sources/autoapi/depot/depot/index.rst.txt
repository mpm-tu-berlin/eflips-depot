:py:mod:`depot.depot`
=====================

.. py:module:: depot.depot

.. autoapi-nested-parse::

   Created on Fri Oct 13 11:12:00 2017

   @author: P.Mundt, E.Lauth

   Core components of the depot simulation model.



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   depot.depot.DepotWorkingData
   depot.depot.BackgroundStorePut
   depot.depot.BackgroundStoreGet
   depot.depot.BackgroundStore
   depot.depot.UnassignedTrips
   depot.depot.Depot
   depot.depot.BaseDispatchStrategy
   depot.depot.DSFirst
   depot.depot.DSSmart
   depot.depot.DepotControl
   depot.depot.BaseArea
   depot.depot.BaseAreaPut
   depot.depot.BaseAreaGet
   depot.depot.DirectAreaPut
   depot.depot.DirectAreaGet
   depot.depot.DirectArea
   depot.depot.LineAreaPut
   depot.depot.LineAreaGet
   depot.depot.LineArea
   depot.depot.BaseParkingStrategy
   depot.depot.PSFirst
   depot.depot.PSEven
   depot.depot.PSMixed
   depot.depot.PSSmart
   depot.depot.PSSmart2
   depot.depot.AreaGroup
   depot.depot.ParkingAreaGroup
   depot.depot.BaseActivityPlan
   depot.depot.DefaultActivityPlan
   depot.depot.SpecificActivityPlan



Functions
~~~~~~~~~

.. autoapisummary::

   depot.depot.assert_after_checkout
   depot.depot.update_relations



.. py:class:: DepotWorkingData(env, vehicle, home_depot=None)


   Data container for communication between vehicle and depot.
   Attribute of a SimpleVehicle object.

   Parameters:
   home_depot: [Depot] which the vehicle was instantiated in

   Attributes:
   plan: [ActivityPlan] List of DepotArea or AreaGroup objects that the
       vehicle will visit during the stay in a specific depot.
   current_area: [BaseArea subclass] where the vehicle is located at inside 
       the depot. None outside.
   active_processes: [list] for statistics, contains BaseDepotProcess
       or subclass objects that are currently active and not on hold
   any_active_processes: [bool] True if any BaseDepotProcess is currently
       active. Not the same as bool(active_processes) because
       any_active_processes is also True if processes are on hold, e.g. when
       interrupted and waiting for restart.
   on_hold: [bool] flag used to prevent vehicles from being eligible for
       departure between entering an area and starting processes

   .. py:property:: active_processes_copy

      Snapshot of self.active_processes for logging.


   .. py:property:: current_slot

      Return slot number [int] if on an area, else None. The lowest slot
      number is 0. Note that slot_no is not the list index.


   .. py:property:: current_charging_interface

      Return [ChargingInterface] object of current slot on current area,
      if any, else None.


   .. py:property:: etc_processes

      Return simulation time estimate [int or EstimateValue] of when all
      currently active processes will be completed.


   .. py:property:: etc_processes_uncertain

      Return estimate [int or EstimateValue] of when all currently active
      processes will be completed. Unlike self.etc_processes, get a rough
      estimate if an etc value is EstimateValue.UNKNOWN.


   .. py:property:: isrfd

      Return True if this vehicle is ready for departure (rfd).

      A vehicle is rfd if it's located at a sink (parking area) and has no
      active processes except Precondition. A blocked vehicle at LineArea may
      be rfd (see LineStore.isunblocked for this filter). Cancellation of
      processes is not considered for the rfd state because this depends on
      trip requirements.



.. py:class:: BackgroundStorePut(store, item)


   Bases: :py:obj:`simpy.resources.store.StorePut`

   Interface for customization of put-events.


.. py:class:: BackgroundStoreGet(store, filter=lambda item: True, **kwargs)


   Bases: :py:obj:`eflips.simpy_ext.FilterStoreExtGet`

   Interface for customization of get-events.


.. py:class:: BackgroundStore(env, ID, capacity=float('inf'))


   Bases: :py:obj:`eflips.simpy_ext.FilterStoreExt`

   Virtual area for background tasks that require functionalities such as
   logging.

   .. py:attribute:: put

      

   .. py:attribute:: get

      

   .. py:method:: select(ID, print_missing=True)

      Return the item with *ID* in self.items. Return None if the ID is
      not found.
      Relies on *ID* to be unique.

      ID: [str]
      print_missing: [bool] print a message if the item is not found.



.. py:class:: UnassignedTrips(key, values=())


   Bases: :py:obj:`eflips.helperFunctions.SortedList`

   Subclass of SortedList with specific logging upon modification.

   .. py:method:: append(trip)

      Append *obj* and sort.


   .. py:method:: extend(trips)

      Extend by appending elements from *iterable* and sort.


   .. py:method:: remove(trip)

      Remove first occurrence of value.

      Raises ValueError if the value is not present.


   .. py:method:: pop(index=-1)

      Remove and return item at index (default last).

      Raises IndexError if list is empty or index is out of range.



.. py:class:: Depot(env, ID)


   Representation of a depot. Owns all related objects such as areas
   and the DepotControl as attributes.
   A depot must be created and configured using a DepotConfigurator and may 
   be empty upon instantation. Before simulation start, the validity of the
   configuration must be checked (DepotConfigurator.isvalid) and the depot
   init completed (DepotConfigurator.complete).

   Parameters:
   env: [simpy.Environment] object
   ID: [str] unique name of the depot. Must match the depot name in timetable
       and vehicle data. Examples: 'I', 'M'

   Attributes:
   evaluation: [eflips.depotEvaluation.DepotEvaluation] instance
   timetable: [eflips.depotStandalone.Timetable] that issues trip requests at
       the depot. May be None until simulation start.

   Attributes set by DepotConfigurator:
   resources: [dict] containing all DepotResource objects related to this
       depot with their IDs as key.
   resource_switches: [dict] containing all ResourceSwitch objects related to
       this depot with their IDs as key.
   processes: [dict] containing dicts with data for instantiation of all
       BaseDepotProcess subclasses related to this depot with their IDs as key
   areas: [dict] containing all BaseArea subclass objects (excluding
       BackgroundStore) related to this depot with their IDs as key.
   groups: [dict] containing all AreaGroup and ParkingAreaGroup objects
       related to this depot with their IDs as key.
   default_plan: [ActivityPlan] object that permits all vehicles.
   specific_plans: [dict] of ActivityPlan objects for specific vehicles
       with plan ID as key. Matches precede the default plan.
   parking_area_groups: [list] of ParkingAreaGroup objects from self.groups.
   list_areas: [dict_values] iterable for list-like access. Do not modify
       directly; is updated automatically through self.areas.
   direct_departure_areas: [list] of DirectArea objects from self.areas that
       are also a part of a parking area group, i.e. vehicles can depart from
   list_spec_plans: [dict_values] iterable for list-like access to values of
       specific_plans. Do not modify directly; is updated automatically
       through self.specific_plans.
   capacity: [int] total amount of slots on areas.
   parking_capacity: [int] total amount of slots on areas in parking area
       groups.
   parking_capacity_direct: [int] total amount of slots on Direct areas in
       parking area groups (total buffer capacity)

   Runtime attributes:
   init_store: [BackgroundStore] where vehicles that have this depot as
       home depot are put in by VehicleGenerator before simulation start and
       retrieved during the simulation.
   pending_departures: [list] of SimpleTrip objects for departures that may
       have a vehicle assigned to, but haven't started yet and are not
       supposed to be served by vehicles from self.init_store.
   unassigned_trips: [list] of trips in pending_departures that have no
       scheduled vehicle.
   pending_arrivals: [list] of SimpleTrip objects on which a vehicle is
       currently on it's way to this depot. Sorted by estimated time of
       arrival (atd) as long as atd doesn't change during the trip.
   any_process_cancellable_for_dispatch: [bool] True if at least one process
       in self.processes is cancellable for dispatch.

   .. py:property:: total_power

      Current power of all active charging interfaces in the depot.


   .. py:property:: vacant

      Return the total sum of slots that are unoccupied in the depot.


   .. py:property:: vacant_accessible

      Return the sum of slots that are unoccupied and accessible
      (not blocked) from the default entrance side on all areas.


   .. py:property:: count

      Return the amount of vehicles in the depot, i.e. the amount of
      occupied slots.


   .. py:property:: max_count

      Return the maximum number of vehicles that were in the depot at the
      same time.


   .. py:property:: maxOccupiedSlots

      Return the total number of slots that have been occupied up to this
      point of time. Only functional if the simulation is run with the GUI.


   .. py:property:: urgent_trips

      Return a list of trips that are urgent: due or delayed and no
      vehicle assigned to.
      Relies on self.unassigned_trips to be sorted by std.


   .. py:property:: overdue_trips

      Return a list of trips that are overdue, i.e. have not started yet
      although the target departure time has passed. Includes trips that have
      a scheduled vehicle.


   .. py:method:: update_power(value)

      Add *value* to depot-wide power value and log.


   .. py:method:: checkin(vehicle)

      Redirect to checkin() of the depot's depot_control.
      Don't add code here.


   .. py:method:: checkout(vehicle)

      Redirect to checkout() of the depot's depot_control.
      Don't add code here.


   .. py:method:: request_vehicle(trip, filter=lambda item: True)

      Redirect to request_vehicle of the depot's depot_control.



.. py:class:: BaseDispatchStrategy


   Bases: :py:obj:`abc.ABC`

   Base class for a dispatch strategy for matching trips and vehicles.

   Attributes:
   name: [str] identifier used internally and for configuration
   short_description: [str] for frontend
   tooltip: [str] short explanation for frontend

   .. py:attribute:: name

      

   .. py:attribute:: short_description

      

   .. py:attribute:: tooltip

      

   .. py:method:: trigger(*args, **kwargs)
      :staticmethod:
      :abstractmethod:

      Trigger the matching process.


   .. py:method:: next_trips(depot)
      :staticmethod:

      Return depot.urgent_trips, if not empty. Else return a list
      containing only the unassigned trip with the lowest scheduled time of
      departure (std), if any. Otherwise return an empty list.
      Relies on depot.unassigned_trips to be sorted by std.


   .. py:method:: assign(vehicle, trip, depot)
      :staticmethod:

      Match *vehicle* and *trip*.


   .. py:method:: scheduling_delay(env, trip)
      :staticmethod:

      Return a delay [int] for matching *trip* with a vehicle.


   .. py:method:: trigger_until_found(depot, trip, interval=60)
      :staticmethod:

      Periodically trigger the *depot*'s dispatch until a vehicle is found
      for *trip*. This triggering should be used for special cases only and
      *interval* [s] should be set with care due to a potentially high
      impact on sim time.



.. py:class:: DSFirst


   Bases: :py:obj:`BaseDispatchStrategy`

   Base class for a dispatch strategy for matching trips and vehicles.

   Attributes:
   name: [str] identifier used internally and for configuration
   short_description: [str] for frontend
   tooltip: [str] short explanation for frontend

   .. py:attribute:: name
      :value: 'FIRST'

      

   .. py:attribute:: short_description
      :value: 'first'

      

   .. py:attribute:: tooltip
      :value: 'Match trips and vehicles in the order of creation of the parking area the vehicles are located...'

      

   .. py:method:: trigger(depot, *args, **kwargs)
      :staticmethod:

      Trigger the matching process.


   .. py:method:: get_pending_vehicles(depot, trip)
      :staticmethod:

      Return a dict of pending vehicles.
      A vehicle is pending if it's at an area in a parking area group and has
      no trip assigned to, or its assigned trip's std is later than
      *trip*.std.

      structure of returned dict:
          {parking_area_group : {store : list of vehicles in fifo order}}


   .. py:method:: find_match(depot)
      :staticmethod:

      Find a matching vehicle for the next trip.
      Is called recursively while DSFirst.try_assign is successful.


   .. py:method:: try_assign(vehicle, trip, depot)
      :staticmethod:

      Try to match *vehicle* and *trip*. Return True if successful, else
      False.



.. py:class:: DSSmart


   Bases: :py:obj:`BaseDispatchStrategy`

   Base class for a dispatch strategy for matching trips and vehicles.

   Attributes:
   name: [str] identifier used internally and for configuration
   short_description: [str] for frontend
   tooltip: [str] short explanation for frontend

   .. py:attribute:: name
      :value: 'SMART'

      

   .. py:attribute:: short_description
      :value: 'smart'

      

   .. py:attribute:: tooltip
      :value: 'Match trips and vehicles using DispatchRating.'

      

   .. py:attribute:: vf_urgent

      

   .. py:attribute:: vf_usual

      

   .. py:method:: trigger(depot, *args, **kwargs)
      :staticmethod:

      Trigger the matching process.


   .. py:method:: get_suitable_vehicles(depot, trip, vf)
      :staticmethod:

      Return a list of vehicles that are suitable for *trip*.
      A vehicle is suitable if it's at an area in a parking area group and
      has no trip assigned to, or its assigned trip's std is later than
      *trip*.std. Furthermore, a vehicle must pass all criteria of *vf*. For
      Line areas, only the first pending vehicle closest to the exit is
      included.


   .. py:method:: find_match(depot)
      :staticmethod:

      Find a matching vehicle for the next trip.
      Is called recursively while successful.


   .. py:method:: scheduling_delay(env, trip)
      :staticmethod:

      Return the interval [int] from now until *lead_time_match* before
      departure time of *trip*. Return 0 if the departure time is in less
      than *lead_time_match*.



.. py:class:: DepotControl(env, depot, dispatch_strategy_name='FIRST')


   Control of vehicle movement and actions in the depot.
   Instantiated as attribute of the corresponding depot.

   Attributes:
   departure_areas: [AreaGroup] of all areas where vehicles can leave the
       depot from. Is automatically filled with areas where issink is True in
       DepotConfigurator. Is not in self.depot.groups.
   request_count: [Counter] used for validation when
       globalConstants['depot']['prioritize_init_store'] is True

   .. py:property:: dispatch_strategy_name

      'name' attribute of set dispatch strategy


   .. py:property:: dispatch_strategy

      [BaseDispatchStrategy] subclass


   .. py:attribute:: dispatch_strategies

      

   .. py:attribute:: parking_congestion_event_cls

      Event that succeeds if parking congestion occurs because no slot can be 
      found at a parking area upon request.


   .. py:method:: _complete()

      Actions that must take place before simulation start, but may not be
      possible during the depot configuration phase.


   .. py:method:: checkin(vehicle)

      Reset and set several variables upon arrival of a vehicle and
      trigger follow-up actions.


   .. py:method:: assign_plan(vehicle)

      Check what activity plan is suitable for the vehicle and assign it.
              


   .. py:method:: proceed(vehicle)

      Main function to move a vehicle to the next area. Splits into
      proceed_area and proceed_group for further actions.


   .. py:method:: proceed_area(vehicle, current_area, next_area)

      Proceed with *next_area* as a BaseArea subtype.


   .. py:method:: proceed_group(vehicle, current_area, group)

      Proceed with next_area as an AreaGroup type.


   .. py:method:: get_process_need(vehicle, area)

      Check what processes a vehicle will request at an area.
      Return a list of processes by ID to request, which can be empty.


   .. py:method:: run_processes(vehicle, process_IDs)

      Initialize and run processes marked in process_IDs for a vehicle at
      an area.
      If more than one process is requested, then all processes will be
      started simultaneously. Call proceed() when all processes have
      finished.


   .. py:method:: checkout(vehicle)

      Actions that are necessary for a vehicle when leaving the depot.


   .. py:method:: trigger_dispatch()

      Trigger the matching of trips and vehicles of
      self.dispatch_strategy.


   .. py:method:: request_vehicle(trip, filter=lambda item: True)

      Schedule processes for the vehicle request for *trip*.


   .. py:method:: register_for_dispatch(trip)

      Prepare processing the vehicle request for *trip* by the regular
      dispatch.


   .. py:method:: schedule_for_matching(trip)

      Wait *delay* and then schedule *trip* for matching with a vehicle.
              


   .. py:method:: process_request_prio_parking(trip, filter=lambda item: True)

      Return a vehicle from the depot for which *filter* returns True.
      If there is no matching vehicle available immediately at
      self.departure_areas, try to get a vehicle from depot.init_store.
      If there is no matching vehicle either, issue requests at
      self.departure_areas that succeed as soon as a match is available.


   .. py:method:: process_request_prio_init(trip, filter=lambda item: True)

      Return a vehicle from the depot for which *filter* returns True.
      Try to get a vehicle from depot.init_store first. If there is no
      match available, issue requests at self.departure_areas.



.. py:function:: assert_after_checkout(env, vehicle)


.. py:function:: update_relations(put_event)

   Updater to be called as callback of a successful put event for an area.
   Relies on a corresponding get event to succeed in the same simulation
   time step.


.. py:class:: BaseArea(env, ID, available_processes, issink, entry_filter=None, charging_interfaces=None, slot_orientation='HORIZONTAL', *args, **kwargs)


   Bases: :py:obj:`abc.ABC`

   Abstract base class for an area in a depot. Subclasses must inherit from
   a SimPy Store subclass that has attributes 'capacity', 'items' and
   'vacant'.

   Slots in the area are homogeneous, meaning that all vehicles that pass
   *entry_filter* can be put on any slot, not considering e.g. vehicle
   dimensions. Also, resources are not bound to a specific slots, but
   available on all. Instantiate different depot area objects if heterogeneous
   slots are needed.

   Parameters:
   ID: [str] unique title describing the main purpose of the area such as
       "service", "parking"
   charging_interfaces: [list] of DepotChargingInterface objects
   available_processes: [list] of depot process IDs [str] that are offered at
       the area
   issink: [bool] Defines if the area is a sink for vehicles in the depot,
       meaning that there is no next area to move to after finishing processes
       at this area. Vehicles are then available for leaving the depot.
       Enables declaring one or multiple areas as sink (usually parking
       areas). Set to True for a sink, or False for a non- terminating area.
   entry_filter: [VehicleFilter object or None] that determines if a vehicle
       is permitted to enter the area. If entry_filter returns True for a
       vehicle, it's preliminarily allowed to enter (other checks for
       processes need may follow). If entry_filter returns False, checks will
       move on to the next area. See class VehicleFilter for more
       documentation. If left None, a vehicle filter permitting all vehicles
       is created.
   process_priority: NOT IMPLEMENTED YET
       [list] specifies the order in which a Vehicle has to request
       processes at an area. Request processes consecutively or
       simultaneously.
   slot_orientation: [str] orientation of slots. Used for display purposes
       in the GUI only, has no functional purpose. See
       gui.area_view.DepotAreaView for documentation.


   .. py:property:: vacant_accessible

      Helper function to distinguish between direct and line areas for the
      determination of vacant accessible slots.


   .. py:property:: vehicles


   .. py:property:: charge_proc

      Return the type of the Charge or subclass process available at this
      area. Return None if there is None. Relies on the assumption that there
      is only one charging process at an area at max.


   .. py:property:: maxOccupiedSlots


   .. py:property:: scheduledVehicles

      Returns list of scheduled vehicles (trips assigned).


   .. py:property:: count_rfd

      Return the number of vehicles that are ready for departure at this
      area.


   .. py:property:: count_rfd_unblocked
      :abstractmethod:

      Return the number of vehicles that are ready for departure and not
      blocked from departure at this area.


   .. py:method:: __repr__()

      Return repr(self).


   .. py:method:: istypestack(substitution=True)

      Return a tuple (istypestack [bool or None], vehicle_type
      [VehicleType or None]).

      istypestack is True if all vehicles are of the same type. vehicle_type
      then is the type of the first vehicle from the back of the store. If
      *substitution* is True, also return True if all vehicles are mutually
      substitutable. istypestack is None if the area is empty. Otherwise
      False. In these cases vehicle_type is None.


   .. py:method:: istypestack_with(vehicle, substitution=True)

      Return True if current vehicles would be a typestack together with
      *vehicle*. Extenuate the comparison with subsitutable types if
      *substitution* is True. Return None if the area is empty. Otherwise
      return False.


   .. py:method:: select(ID, print_missing=True)

      Return the item with *ID* in self.items. Return None if the ID is
      not found.
      Relies on *ID* to be unique.

      ID: [str]
      print_missing: [bool] print a message if the item is not found.



.. py:class:: BaseAreaPut(store, *args, **kwargs)


   Bases: :py:obj:`abc.ABC`

   Base put event for areas regardless of area type.


.. py:class:: BaseAreaGet(store, *args, **kwargs)


   Bases: :py:obj:`abc.ABC`

   Base get event for areas regardless of area type.


.. py:class:: DirectAreaPut(store, item, other_requests=None)


   Bases: :py:obj:`BaseAreaPut`, :py:obj:`eflips.simpy_ext.ExclusiveRequest`, :py:obj:`eflips.simpy_ext.StorePutExt`

   Request to put *item* into the *store*. The request is triggered once
   there is space for the item in the store.

   Callbacks by BaseAreaPut are added last.



.. py:class:: DirectAreaGet(store, filter=lambda item: True, other_requests=None, **kwargs)


   Bases: :py:obj:`BaseAreaGet`, :py:obj:`eflips.simpy_ext.ExclusiveRequest`, :py:obj:`eflips.simpy_ext.FilterStoreExtGet`

   Request to get an *item* from the *store* matching the *filter*. The
   request is triggered once there is such an item available in the store.

   *filter* is a function receiving one item. It should return ``True`` for
   items matching the filter criterion. The default function returns ``True``
   for all items, which makes the request to behave exactly like
   :class:`StoreGet`.

   Callbacks by BaseAreaGet are added last.



.. py:class:: DirectArea(env, ID, capacity, available_processes, issink, entry_filter, charging_interfaces=None, slot_orientation='HORIZONTAL')


   Bases: :py:obj:`BaseArea`, :py:obj:`eflips.simpy_ext.PositionalFilterStore`

   Depot area where vehicles don't block each other and therefore direct
   access on all stored vehicles is possible.

   See parent class descriptions for more details.


   .. py:property:: pendingVehicles

      Returns list of pending vehicles (potentially blocking vehicles).


   .. py:property:: count_rfd_unblocked

      Return the number of vehicles that are ready for departure and not
      blocked from departure at this area.


   .. py:attribute:: put

      

   .. py:attribute:: get

      

   .. py:method:: slot_no(item)

      Return the slot number of *item*. Return None if item is not in
      self.items.
      Unlike list indexing, slot number counting starts at 1. Therefore only
      meant for display purposes, otherwise use items.index(vehicle).


   .. py:method:: index2slot_no(index)
      :staticmethod:

      Convert *index* (correct value for indexing list self.items) to slot
      number (for display purposes).



.. py:class:: LineAreaPut(store, item, side='default', other_requests=None)


   Bases: :py:obj:`BaseAreaPut`, :py:obj:`eflips.simpy_ext.ExclusiveRequest`, :py:obj:`eflips.simpy_ext.LineStorePut`

   Request to put *item* onto deepest accessible slot from *side* in
   *store*. The request is triggered once there is accessible space for the
   item in the store.

   side: [str] Same as in LineStorePut.

   Callbacks by BaseAreaPut are added last.



.. py:class:: LineAreaGet(store, filter=lambda item: True, side='default', other_requests=None)


   Bases: :py:obj:`BaseAreaGet`, :py:obj:`eflips.simpy_ext.ExclusiveRequest`, :py:obj:`eflips.simpy_ext.LineFilterStoreGet`

   Request to get the first accessible *item* from *side* in *store*
   matching *filter*(item). The request is triggered once there is an
   accessible item available in the store.

   side: [str] Same as in LineFilterStoreGet.
   filter: Same as in LineFilterStoreGet. Function receiving one item. It must
       return True for items matching the filter criterion. The default
       function returns True for all items.

   Subclass of ExclusiveRequest and simpyExt.LineFilterStoreGet, provides an
   interface for customization.

   Callbacks by BaseAreaGet are added last.



.. py:class:: LineArea(env, ID, capacity, available_processes, issink, entry_filter, charging_interfaces=None, slot_orientation='VERTICAL', side_put_default='back', side_get_default='front')


   Bases: :py:obj:`BaseArea`, :py:obj:`eflips.simpy_ext.LineFilterStore`

   Depot area where vehicles are arranged in a line and can block each
   other (feature of LineFilterStore). Therefore not all stored vehicles may
   be directly accessible.
   See parent class descriptions for more details.

   At the moment, only areas where issink is True (e.g. typically False for a
   service area, True for parking areas) can reliably be of this area type.


   .. py:property:: pendingVehicles

      Returns list of pending vehicles (potentially blocking vehicles).


   .. py:property:: count_rfd_unblocked

      Return the number of vehicles that are ready for departure and not
      blocked from departure at this area.


   .. py:attribute:: put

      

   .. py:attribute:: get

      

   .. py:method:: slot_no(item)

      Return the slot number of *item*. Return None if item is not in
      self.items.
      The slot closest to the front has the lowest number, which is the
      reverse of items.index. Unlike list indexing, slot number counting
      starts at 1. Therefore only meant for display purposes, otherwise use
      items.index(vehicle).


   .. py:method:: index2slot_no(index)

      Convert *index* (correct value for indexing self.items) to slot
      number (for display purposes).



.. py:class:: BaseParkingStrategy


   Bases: :py:obj:`abc.ABC`

   Base class for a parking strategy used with a parking area group.

   Attributes:
   name: [str] identifier used internally and for configuration
   short_description: [str] for frontend
   tooltip: [str] short explanation for frontend

   .. py:attribute:: name
      :value: ''

      

   .. py:attribute:: short_description
      :value: ''

      

   .. py:attribute:: tooltip
      :value: ''

      

   .. py:method:: determine_store(*args, **kwargs)
      :staticmethod:
      :abstractmethod:

      Return the most suitable area for parking a vehicle. A put request
      to this area must be immediately successful.



.. py:class:: PSFirst


   Bases: :py:obj:`BaseParkingStrategy`

   Base class for a parking strategy used with a parking area group.

   Attributes:
   name: [str] identifier used internally and for configuration
   short_description: [str] for frontend
   tooltip: [str] short explanation for frontend

   .. py:attribute:: name
      :value: 'FIRST'

      

   .. py:attribute:: short_description
      :value: 'first available (default)'

      

   .. py:attribute:: tooltip
      :value: Multiline-String

       .. raw:: html

           <details><summary>Show Value</summary>

       .. code-block:: python

           """This strategy will try to park a vehicle on the first available
           slot, filling up areas inside a group one by one."""

       .. raw:: html

           </details>

      

   .. py:method:: determine_store(preselected_stores, *args, **kwargs)
      :staticmethod:

      Return the most suitable area for parking a vehicle. A put request
      to this area must be immediately successful.



.. py:class:: PSEven


   Bases: :py:obj:`BaseParkingStrategy`

   Base class for a parking strategy used with a parking area group.

   Attributes:
   name: [str] identifier used internally and for configuration
   short_description: [str] for frontend
   tooltip: [str] short explanation for frontend

   .. py:attribute:: name
      :value: 'EVEN'

      

   .. py:attribute:: short_description
      :value: 'even'

      

   .. py:attribute:: tooltip
      :value: Multiline-String

       .. raw:: html

           <details><summary>Show Value</summary>

       .. code-block:: python

           """This strategy will try to even out area usage inside a group,
           increasing vehicle availability."""

       .. raw:: html

           </details>

      

   .. py:method:: determine_store(preselected_stores, *args, **kwargs)
      :staticmethod:

      Return the most suitable area for parking a vehicle. A put request
      to this area must be immediately successful.



.. py:class:: PSMixed


   Bases: :py:obj:`BaseParkingStrategy`

   Base class for a parking strategy used with a parking area group.

   Attributes:
   name: [str] identifier used internally and for configuration
   short_description: [str] for frontend
   tooltip: [str] short explanation for frontend

   .. py:attribute:: name
      :value: 'MIXED'

      

   .. py:attribute:: short_description
      :value: 'mixed'

      

   .. py:attribute:: tooltip
      :value: Multiline-String

       .. raw:: html

           <details><summary>Show Value</summary>

       .. code-block:: python

           """This strategy combines the FIRST and MIXED strategies, starting to access the next
           area after the previous one is filled up to 25% until the last one is at
           25%, then going back to the first area until 50% and so on."""

       .. raw:: html

           </details>

      

   .. py:method:: determine_store(preselected_stores, *args, **kwargs)
      :staticmethod:

      Return the most suitable area for parking a vehicle. A put request
      to this area must be immediately successful.



.. py:class:: PSSmart


   Bases: :py:obj:`BaseParkingStrategy`

   This strategy consists of two steps:

   1)  parking vehicles on stores depending on their accessibility
           -> rate_stores()
   2)  assign vehicles to trips and vice versa
           -> find_match()

   The ideal depot layout for this strategy has several non-typed (no
   entry_filter) LineStores, optionally followed by a DirectStore for
   buffering vehicles which cannot initially be assigned.

   Note: This strategy only makes sense with stores that don't restrict by
   vehicle type, since it wont have any effect on typed stores.


   .. py:attribute:: name
      :value: 'SMART'

      

   .. py:attribute:: short_description
      :value: 'smart'

      

   .. py:attribute:: tooltip
      :value: Multiline-String

       .. raw:: html

           <details><summary>Show Value</summary>

       .. code-block:: python

           """This strategy will try to utilize the areas inside a group according to
           upcoming departure requests, optimizing vehicle availability
           
           Note: Potential improvements only affect non-vehicle-typed parking lots."""

       .. raw:: html

           </details>

      

   .. py:method:: determine_store(preselected_stores, parking_area_group, item, *args, **kwargs)
      :staticmethod:

      Return the most suitable area for parking a vehicle. A put request
      to this area must be immediately successful.


   .. py:method:: rate_stores(preselected_stores, vehicle)
      :staticmethod:

      Rate [preselected_stores] by accessibility for [vehicle] and
      return a dict (key: result, value: list of stores having this result).

      Called by DSFirst.find_match.


   .. py:method:: rate_store(store, vehicle)
      :staticmethod:

      Rate [store] by accessibility for [vehicle]: 0 means directly
      accessible, higher values mean lower accessibility (lower => better).

      Called by DSFirst.rate_stores.

      Might be expanded in the future.



.. py:class:: PSSmart2


   Bases: :py:obj:`BaseParkingStrategy`

   .. py:attribute:: name
      :value: 'SMART2'

      

   .. py:attribute:: short_description
      :value: 'smart2'

      

   .. py:attribute:: tooltip
      :value: 'Select a slot using ParkRating.'

      

   .. py:method:: determine_store(preselected_stores, parking_area_group, item, *args, **kwargs)
      :staticmethod:

      Return the most suitable area for parking a vehicle. A put request
      to this area must be immediately successful.


   .. py:method:: log_best(parking_area_group, rating)
      :staticmethod:

      Add the best value of a rating to parking_area_group.pssmart2_logs.
      rating: [ParkRating]



.. py:class:: AreaGroup(env, stores, ID)


   Bases: :py:obj:`eflips.simpy_ext.StoreConnector`

   Class for grouping depot areas.

   Parameters:
   stores: [list] of BaseArea subclass objects

   Attributes:
   stores_by_vehicle_type: [dict]
   direct_areas: [list] of areas of type DirectArea in self.stores
   line_areas: [list] of areas of type LineArea in self.stores
   max_capacity_line: [int] maximum capacity among Line areas in this group
   capacity_direct: [int] total cacpacity of Direct areas in this group
   capacity_line: [int] total cacpacity of Line areas in this group


   .. py:method:: clear()

      Remove all entries from self.stores and update. self.depot is
      unaffected.


   .. py:method:: check_entry_filters(vehicle)

      Return a list of booleans that are the results of entry permission
      checks at areas in self.stores. Has the same length as
      self.stores.


   .. py:method:: update_defaults()

      Update attributes after relevant changes such as the amount of areas
      in the group.



.. py:class:: ParkingAreaGroup(env, stores, ID, parking_strategy_name='FIRST')


   Bases: :py:obj:`AreaGroup`

   Group specifically for parking areas. Provides various algorithms to
   decide in which area to put a vehicle.

   Parameters:
   parking_strategy_name: [str] name as in parking strategy class attributes.

   Attributes:
   parking_strategy: [BaseParkingStrategy] subclass
   max_power, max_power: [int or float or None] min and max of max_power of
       all charging interfaces at areas in this group. Constant, set before
       simulation start. None if there are no charging interfaces.
   put_queue: [dict] Container for keeping count and time of pending put
       requests to the group. Provisional, may be changed.


   .. py:property:: stores


   .. py:property:: parking_strategy_name

      'name' attribute of set parking strategy


   .. py:property:: parking_strategy

      [BaseParkingStrategy] subclass


   .. py:attribute:: parking_strategies

      

   .. py:method:: add_store(store)

      Add an area to this group.


   .. py:method:: remove_store(store)

      Remove an area from this group.


   .. py:method:: clear()

      Remove all entries from self.stores and update. self.depot,
      self.depot.parking_area_groups and self.parking_strategy are
      unaffected.


   .. py:method:: update_power_extrema()

      Setter for self.max_power and self.min_power.


   .. py:method:: put(item, selection=None)

      Summarize put_imm and put_wait. A parking strategy is applied here.

      In this method strategies can be determined before calling the actual
      put() methods, e.g. by modifying the *selection* parameter.

      selection: [list] of booleans matching the length of self.stores.
          Specifies which areas are excluded from consideration even before
          applying a parking strategy.



.. py:class:: BaseActivityPlan(ID, locations=None, vehicle_filter=None)


   Bases: :py:obj:`abc.ABC`

   Base class for the guidance of a vehicle inside a depot.
   A copied instance is assigned to a vehicle at check-in.

   Parameters:
   locations: [list] of DepotArea or AreaGroup objects


   .. py:method:: __len__()


   .. py:method:: __getitem__(x)


   .. py:method:: __setitem__(i, x)


   .. py:method:: __delitem__(i)


   .. py:method:: __iter__()


   .. py:method:: __reversed__()


   .. py:method:: __str__()

      Return str(self).


   .. py:method:: append(x)


   .. py:method:: extend(l)


   .. py:method:: remove(x)


   .. py:method:: pop(i=-1)


   .. py:method:: clear()


   .. py:method:: copy()

      Return a new object with the same locations, ID and vehicle_filter.
              



.. py:class:: DefaultActivityPlan(locations=None)


   Bases: :py:obj:`BaseActivityPlan`

   Default plan applicable for every vehicle. One plan is mandatory for a
   depot configuration.


   .. py:method:: copy()

      Return a new object with the same locations, ID and vehicle_filter.
              



.. py:class:: SpecificActivityPlan(ID, locations=None, vehicle_filter=None)


   Bases: :py:obj:`BaseActivityPlan`

   Plan that is applicable to vehicles passing vehicle_filter only. A depot
   configuration may include zero or more specific plans.



