:py:mod:`depot.simple_vehicle`
==============================

.. py:module:: depot.simple_vehicle

.. autoapi-nested-parse::

   Created on Fri Oct 13 11:16:58 2017

   @author: P.Mundt

   Vehicle components for the depot simulation.



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   depot.simple_vehicle.VehicleType
   depot.simple_vehicle.VehicleTypeGroup
   depot.simple_vehicle.SimpleVehicle
   depot.simple_vehicle.SimpleBattery



Functions
~~~~~~~~~

.. autoapisummary::

   depot.simple_vehicle.soc_input_valid



.. py:class:: VehicleType(ID, battery_capacity, soc_min, soc_max, soc_init, soh, CR=None)


   Definition of a vehicle type. Instantiated once per type. Vehicles of
   the same type hold references to the same VehicleType instance.

   Parameters:
   ID: [str]
   battery_capacity: [int or float] energy_nominal of battery.
       See SimpleBattery for info about other battery attributes.
   CR: [int or float] consumption rate of energy from the battery. kWh/km if
       distance-based or kW if time-based. eflips.settings.globalConstants[
       'depot']['consumption_calc_mode'] must be set accordingly. May be
       omitted if consumption calculation is not CR-based.

   Attributes:
   group: [VehicleTypeGroup or None] that the vehicle type is part of, if any.
   count: {dict} key: depot, value: number of vehicles with this type by
       depot
   share: {dict} key: depot, value: share of vehicles with this type by
       depot


   .. py:method:: __repr__()

      Return repr(self).



.. py:class:: VehicleTypeGroup(types=None)


   Hashable identifier for a list of vehicle types that are mutually
   substitutable on trips.

   Parameters:
   types: [list] of VehicleType objects. Can be empty upon instantiation.

   Attributes:
   count: {dict} key: depot, value: number of vehicles with this group by
       depot
   share: {dict} key: depot, value: share of vehicles with this group by
       depot


   .. py:property:: vehicle_types_joinedstr

      Return the IDs of self.types comma-separated in a single string.
      Example returns:
      ['EN'] -> 'EN'
      ['EN', 'DL'] -> 'EN, DL'



.. py:class:: SimpleVehicle(env, ID, vehicle_type, home_depot=None)


   Vehicle for the depot simulation.

   Parameters:
   env: [simpy.Environment]
   ID: [str] unique identifier such as vehicle number
   vehicle_type: [VehicleType]

   Attributes:
   trip: [SimpleTrip] current trip of the vehicle. None inside the depot.
   system_entry: [bool] False as long as the vehicle has not been used. True
       after.


   .. py:method:: __repr__()

      Return repr(self).


   .. py:method:: drive()

      Process one trip.
      Simplifies everything that happens outside of the depot to consuming
      energy and letting time pass if the depot simulations runs on its own.
      Ends by calling checkin when arriving at the depot at the end of a
      trip.



.. py:class:: SimpleBattery(env, energy_nominal, soc_min, soc_max, soc_init, soh)


   Battery for a vehicle.

   Parameters:
   energy_nominal = [float or int: kWh] nominal energy capacity. constant
   soc_min, soc_max: [float] usable energy range. 0...1
   soc_init: [float] initial state of charge within usage energy range
       (energy_real). 0...1
   soh: [float] state of health. 0...1

   Attributes:
   n_charges: number of times the battery has been charged
   active_processes: [list] of BaseDepotProcess or subclass objects that are
       currently modifying energy. These objects must implement and update
       method that modifies energy early.
   last_update: [int] sim time log to prevent recursion when retrieving energy
       and unnecessary updates.


   .. py:property:: energy

      Return current energy level. Ask active processes for updates first.
              


   .. py:property:: energy_real

      Return current real energy capacity.


   .. py:property:: soc

      Return current state of charge with regard to energy_real.


   .. py:property:: energy_max

      Return maximum usable energy.


   .. py:property:: energy_min

      Return minimum usable energy.


   .. py:property:: energy_remaining

      Effective amount of energy usable by vehicle at the current state
      of charge.


   .. py:method:: get(amount)

      Subtract *amount* from self.energy.
      If energy would become negative and negativity is not allowed, set it 
      to a given positive percentage of self.energy_real. Simple imitation of
      opportunity charging.


   .. py:method:: put(amount)

      Add *amount* to self.energy.



.. py:function:: soc_input_valid(soc)


