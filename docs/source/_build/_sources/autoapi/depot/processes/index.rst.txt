:py:mod:`depot.processes`
=========================

.. py:module:: depot.processes

.. autoapi-nested-parse::

   Components for processes in a depot.



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   depot.processes.ProcessStatus
   depot.processes.EstimateValue
   depot.processes.BaseDepotProcess
   depot.processes.VehicleProcess
   depot.processes.Serve
   depot.processes.ChargeAbstract
   depot.processes.Charge
   depot.processes.ChargeSteps
   depot.processes.ChargeEquationSteps
   depot.processes.Standby
   depot.processes.Repair
   depot.processes.Maintain
   depot.processes.Precondition



Functions
~~~~~~~~~

.. autoapisummary::

   depot.processes.exponential_power



.. py:class:: ProcessStatus(*args, **kwds)


   Bases: :py:obj:`enum.Enum`

   Status codes for depot processes.

   .. py:attribute:: NOT_STARTED

      

   .. py:attribute:: WAITING

      

   .. py:attribute:: IN_PROGRESS

      

   .. py:attribute:: COMPLETED

      

   .. py:attribute:: CANCELLED

      


.. py:class:: EstimateValue(*args, **kwds)


   Bases: :py:obj:`enum.Enum`

   Values for process completion time estimates in addition to an int
   value.


   .. py:attribute:: UNKNOWN

      

   .. py:attribute:: COMPLETED

      


.. py:class:: BaseDepotProcess(env, ID, dur=None, required_resources=None, resume=True, priority=0, recall_priority=-1, preempt=True, dur_predefined=True)


   Bases: :py:obj:`abc.ABC`

   Base class for processes in a depot. Core functionalities are:
    - wrapping the execution of a simpy process and handling of required
       resources,
    - providing the option to resume the process after interruption.

   Implements __call__ to make an instance directly callable through
   env.process(BaseDepotProcessSubclass(...)).

   An instance is not reusable, meaning a new object should be instantiated
   for every execution (except resumption).

   A new subclass must be added to configuration.map_process_cls_refs.

   Parameters:
   ID: [str] unique name of the process, such as "serve_default". Subclasses
       instances may use the same ID.
   dur: [int or None] Duration of the execution in seconds. Can be left None
       upon instantiation (e.g. if the duration is calculated directly before
       execution).
   required_resources: [list] of DepotResource or subclass objects. May be
       empty. Before the actual process begins, the execution waits for
       requests to all of those resources to succeed.
   resume: [bool] If True, an interrupted process is resumed for the remaining
       duration.
   priority: [int] priority* for requests to resources in required_resources.
   recall_priority: [int] priority* for re-requests to resources after
       interruption.
   *Note that custom values for priority and recall_priority should be higher
       than simpyExt.ResourceSwitch.priority for Resourceswitch to keep
       its priority (lower value means higher priority).
   preempt: [bool] Argument for requests to resources in required_resources.
       See class DepotResourceRequest and SimPy-doc for details.
   dur_predefined: [bool] True if parameter *dur* is defined before (re)start
       of this process. Set to False if the duration is calculated after
       restarting the process (such as for Charge).

   Attributes:
   starts: [list] of points of time [int] when the process has (re-)started.
   proc: [simpy.Process] processing self._pem.
   requests: [list] of DepotResourceRequest objects for the current process
       execution.
   status: [ProcessStatus] member.
   finished: [simpy.Event] succeeds when the process is completed or cancelled
       and won't be resumed, resulting in self.__call__ to proceed.
   etc: [int or EstimateValue] estimated simulation time of completion. See
       method self._estimate_time_of_completion for details.


   .. py:property:: resIDs

      Return a list of IDs of self.required_resources


   .. py:property:: status


   .. py:method:: _estimate_time_of_completion()

      Calculate self.etc based on the current status.


   .. py:method:: _action(*args, **kwargs)
      :abstractmethod:

      Generator function that characterizes the process. Subclasses must
      implement this method. It must catch the exception simpy.Interrupt and
      let it pass or implement custom follow-ups. If this method yields a
      timeout, the duration must be set as self.dur before the yield
      statement due to the determination of self.etc.


   .. py:method:: estimate_duration(*args, **kwargs)
      :staticmethod:
      :abstractmethod:

      Return an estimate of the process duration in seconds based on given
      parameters as as if it could start immediately. Must be int, not float.
      Possible waiting time for resources are not considered. Therefore the
      estimate is reliable only if the process is started immediately. Static
      to be callable before instantiation.


   .. py:method:: _pre(*args, **kwargs)

      Space for actions before calling self._pem that may not be possible
      upon init.


   .. py:method:: _post(*args, **kwargs)

      Space for actions after finishing self._pem.


   .. py:method:: __call__(*args, **kwargs)

      Generator that starts the execution of this process.
      Note that all parameters required by self._action() have to be passed
      as keyword arguments.


   .. py:method:: _pem(recall=False, *args, **kwargs)

      Process execution method (pem) that wraps waiting for required
      resources (if any) and self._action in a single generator. Is called
      again for the remaining duration after interruption if self.resume is
      True.

      recall: [bool] False for the first call to this method, which uses
          self.priority and self.dur. For a recall, self.recall_priority and
          overwritten self.dur are used.


   .. py:method:: _request_resources(prio)

      Issue requests to required resources, if any.


   .. py:method:: _release_resources()

      Release occupied resource slots and open requests.


   .. py:method:: _cleanup()

      Actions after process execution regardless of its success.


   .. py:method:: cancel()

      Immediately stop the current process execution. No restart is
      scheduled, even if self.resume was set to True before.


   .. py:method:: _cleanup_after_cancel()

      Do general and cancel-specific cleanup.


   .. py:method:: interrupt()

      Immediately stop the current process execution. If self.resume is
      True, a restart is scheduled and may be successful immediately if
      required resources are available. If self.resume is False, same effect
      as self.cancel.



.. py:class:: VehicleProcess(env, ID, dur, ismandatory=True, vehicle_filter=None, required_resources=None, resume=True, priority=0, recall_priority=-1, preempt=True, cancellable_for_dispatch=False, dur_predefined=True)


   Bases: :py:obj:`BaseDepotProcess`, :py:obj:`abc.ABC`

   Base class for processes specific for vehicles at areas.

   Parameters:
   ismandatory: [bool] True if the process is mandatory for vehicles. False if
       the process is optional. If optional, set vehicle_filter for further
       decision.
   vehicle_filter: [VehicleFilter] object for determining if the process
       should be executed for a vehicle on the area. If left None, all
       vehicles are permitted.
   cancellable_for_dispatch: [bool]: if True, the process may be cancelled for
       dispatching the vehicle.

   Attributes:
   request_immediately: [bool] if True, a vehicle will request this process to
       start immediately after entering the area this process is available at.
       There might still be waiting time due to resource requirements.


   .. py:attribute:: request_immediately
      :value: True

      

   .. py:method:: _pre(*args, **kwargs)

      Space for actions before calling self._pem that may not be possible
      upon init.


   .. py:method:: _post(*args, **kwargs)

      Space for actions after finishing self._pem.


   .. py:method:: notify_assignment(*args)

      Trigger dispatch process if there is a relevant update.



.. py:class:: Serve(env, ID, dur, ismandatory=True, vehicle_filter=None, required_resources=None, resume=True, priority=0, recall_priority=-1, preempt=True, cancellable_for_dispatch=False)


   Bases: :py:obj:`VehicleProcess`

   Process of serving a vehicle such as cleaning.

   .. py:method:: _action(vehicle)

      Generator function that characterizes the process. Subclasses must
      implement this method. It must catch the exception simpy.Interrupt and
      let it pass or implement custom follow-ups. If this method yields a
      timeout, the duration must be set as self.dur before the yield
      statement due to the determination of self.etc.


   .. py:method:: estimate_duration(dur, *args, **kwargs)
      :staticmethod:

      Return an estimate of the process duration in seconds based on given
      parameters as as if it could start immediately. Must be int, not float.
      Possible waiting time for resources are not considered. Therefore the
      estimate is reliable only if the process is started immediately. Static
      to be callable before instantiation.



.. py:class:: ChargeAbstract(env, ID, ismandatory=True, vehicle_filter=None, required_resources=None, resume=True, priority=0, recall_priority=-1, preempt=True, cancellable_for_dispatch=False, efficiency=1, *args, **kwargs)


   Bases: :py:obj:`VehicleProcess`, :py:obj:`abc.ABC`

   Base class for charging of vehicles at a depot area.

   Parameters:
   dur: is None because the duration is set during charging.
   required_resources: doesn't need to contain the charging interface because
       it's detected automatically.
   efficiency: [int or float] efficiency of charging process. Value higher
       than 0, max 1.

   Attributes:
   last_update: [int] time of last call to self.update_battery.


   .. py:method:: _pre(*args, **kwargs)

      Space for actions before calling self._pem that may not be possible
      upon init.


   .. py:method:: _request_resources(prio)

      Request the charging interface at the vehicle's current slot.


   .. py:method:: get_chargedata(vehicle)
      :classmethod:

      Get data for charging process of class *cls*. Not robust if there
      are multiple data sets using *cls* with different parameters and
      vehicle filters that can return True for the same vehicle.


   .. py:method:: update_battery(event_name, amount=None)

      Update the energy level of self.vehicle.battery. Can be called
      during the execution of the process to provide an interim update.

      Parameters:
      event_name: [str] for BatteryLog
      amount: [None or float] amount of energy to add to the battery. Must be
          passed if amount might be so small that t_elapsed would be 0 (i.e.
          if called by Charge(sub-)-classes). Leave None for update requests
          from outside the process.



.. py:class:: Charge(env, ID, ismandatory=True, vehicle_filter=None, required_resources=None, resume=True, priority=0, recall_priority=-1, preempt=True, cancellable_for_dispatch=False, efficiency=1, soc_target=1)


   Bases: :py:obj:`ChargeAbstract`

   Process of charging a vehicle's battery. Charging is constant during the
   whole charging process with maximum power provided by the charging
   interface.

   Parameters:
   soc_target: [int or float or str] the charging process will stop at this
       soc. Must be 0 < soc_target <= 1 or 'soc_max'. For soc_max,
       vehicle.battery.soc_max will be used as soc_target.


   .. py:property:: power


   .. py:method:: _action(*args, **kwargs)

      Generator function that characterizes the process. Subclasses must
      implement this method. It must catch the exception simpy.Interrupt and
      let it pass or implement custom follow-ups. If this method yields a
      timeout, the duration must be set as self.dur before the yield
      statement due to the determination of self.etc.


   .. py:method:: estimate_duration(vehicle, charging_interface, *args, **kwargs)
      :staticmethod:

      Return a duration estimate [int] assuming constant charging at
      maximum power until soc_target is reached.


   .. py:method:: check_soc_target(soc_target, vehicle_filter)
      :staticmethod:



.. py:class:: ChargeSteps(env, ID, steps, ismandatory=True, vehicle_filter=None, required_resources=None, resume=True, priority=0, recall_priority=-1, preempt=True, cancellable_for_dispatch=False, efficiency=1)


   Bases: :py:obj:`ChargeAbstract`

   Process of charging a vehicle's battery in linear power steps.

   Parameters:
   steps: [list] of lists or tuples that contain pairs of SoC and power.
       Example: [(0.8, 150), (1, 20)]
       The pairs define the power for charging a battery until the
       corresponding SoC value is reached. The above example states: "Charge
       at 150 kW until SoC=0.8, then reduce to 20 kW until the SoC=1".
       The process starts at the correct SoC value in steps, meaning that if
       in the example a vehicle that already has an SoC of 0.81 starts
       charging will start to charge with 20 kW.
       steps must contain at least one pair and must be sorted by SoC values
       in ascending order. Charging stops when the highest SoC value is
       reached, meaning that for steps=[(0.8, 50), (0.9, 150)] charging will
       stop at SoC=0.9. This functionality replaces the parameter 'soc_target'
       from the class ChargeAbstract/Charge.
       Note that the power values must not be higher than the maximum power of
       the charging interface.


   .. py:property:: power


   .. py:method:: _action(*args, **kwargs)

      Generator function that characterizes the process. Subclasses must
      implement this method. It must catch the exception simpy.Interrupt and
      let it pass or implement custom follow-ups. If this method yields a
      timeout, the duration must be set as self.dur before the yield
      statement due to the determination of self.etc.


   .. py:method:: estimate_duration(vehicle, *args, **kwargs)
      :staticmethod:

      Return a duration estimate [int] respecting steps.


   .. py:method:: check_steps(steps)
      :staticmethod:

      Check *steps* for validity.



.. py:class:: ChargeEquationSteps(env, ID, peq_name, peq_params, ismandatory=True, vehicle_filter=None, required_resources=None, resume=True, priority=0, recall_priority=-1, preempt=True, cancellable_for_dispatch=False, efficiency=1, precision=0.01, soc_target=1)


   Bases: :py:obj:`ChargeAbstract`

   Process of charging a vehicle's battery based on a linearized function
   for power.

   Parameters:
   peq_name: [str] name of equation that returns power based on the current
       situation. Must be in module eflips.depot.processes.
       Example: 'exponential_power'
   peq_params: {dict} of parameters that peq requires in addition to what is
       accessible via arguments.
   precision: [float] SoC invervals to call peq at while charging. Must
       be > 0 and < 1. Lower value means higher precision. High precision can
       significantly increase simulation runtime. Precision is capped to
       intervals resulting in step durations >= 1 second.
   soc_target: same as for class Charge


   .. py:property:: power


   .. py:method:: _action(*args, **kwargs)

      Generator function that characterizes the process. Subclasses must
      implement this method. It must catch the exception simpy.Interrupt and
      let it pass or implement custom follow-ups. If this method yields a
      timeout, the duration must be set as self.dur before the yield
      statement due to the determination of self.etc.


   .. py:method:: estimate_duration(vehicle, charging_interface, *args, **kwargs)
      :staticmethod:

      Return a duration estimate [int] respecting steps.



.. py:function:: exponential_power(vehicle, charging_interface, peq_params, *args, **kwargs)

   Return power in kW for the use with ChargeEquationSteps.

   Parameters:
   vehicle: [SimpleVehicle]
   charging_interface: [DepotChargingInterface]
   peq_params: [dict] with parameters for this function in addition to what is
       accessible via vehicle and charging_interface



.. py:class:: Standby(env, ID, dur, ismandatory=True, vehicle_filter=None, required_resources=None, resume=True, priority=0, recall_priority=-1, preempt=True, cancellable_for_dispatch=False)


   Bases: :py:obj:`VehicleProcess`

   Process of mandatory waiting such as standby times.

   .. py:method:: _action(vehicle)

      Generator function that characterizes the process. Subclasses must
      implement this method. It must catch the exception simpy.Interrupt and
      let it pass or implement custom follow-ups. If this method yields a
      timeout, the duration must be set as self.dur before the yield
      statement due to the determination of self.etc.


   .. py:method:: estimate_duration(dur, *args, **kwargs)
      :staticmethod:

      Return an estimate of the process duration in seconds based on given
      parameters as as if it could start immediately. Must be int, not float.
      Possible waiting time for resources are not considered. Therefore the
      estimate is reliable only if the process is started immediately. Static
      to be callable before instantiation.



.. py:class:: Repair(env, ID, dur, ismandatory=True, vehicle_filter=None, required_resources=None, resume=True, priority=0, recall_priority=-1, preempt=True, cancellable_for_dispatch=False)


   Bases: :py:obj:`VehicleProcess`

   Process of repairing a vehicle.

   .. py:method:: _action(vehicle)

      Generator function that characterizes the process. Subclasses must
      implement this method. It must catch the exception simpy.Interrupt and
      let it pass or implement custom follow-ups. If this method yields a
      timeout, the duration must be set as self.dur before the yield
      statement due to the determination of self.etc.


   .. py:method:: estimate_duration(dur, *args, **kwargs)
      :staticmethod:

      Return an estimate of the process duration in seconds based on given
      parameters as as if it could start immediately. Must be int, not float.
      Possible waiting time for resources are not considered. Therefore the
      estimate is reliable only if the process is started immediately. Static
      to be callable before instantiation.



.. py:class:: Maintain(env, ID, dur, ismandatory=True, vehicle_filter=None, required_resources=None, resume=True, priority=0, recall_priority=-1, preempt=True, cancellable_for_dispatch=False)


   Bases: :py:obj:`VehicleProcess`

   Process of maintaining a vehicle.

   .. py:method:: _action(vehicle)

      Generator function that characterizes the process. Subclasses must
      implement this method. It must catch the exception simpy.Interrupt and
      let it pass or implement custom follow-ups. If this method yields a
      timeout, the duration must be set as self.dur before the yield
      statement due to the determination of self.etc.


   .. py:method:: estimate_duration(dur, *args, **kwargs)
      :staticmethod:

      Return an estimate of the process duration in seconds based on given
      parameters as as if it could start immediately. Must be int, not float.
      Possible waiting time for resources are not considered. Therefore the
      estimate is reliable only if the process is started immediately. Static
      to be callable before instantiation.



.. py:class:: Precondition(env, ID, dur, ismandatory=False, vehicle_filter=None, required_resources=None, resume=True, priority=0, recall_priority=-1, preempt=True, cancellable_for_dispatch=False, efficiency=1, power=20)


   Bases: :py:obj:`VehicleProcess`

   Preconditioning for a vehicle.

   Parameters:
   required_resources: doesn't need to contain the charging interface because
       it's detected automatically.
   power: in kW.

   Attributes:
   request_immediately: is False for this class because preconditioning is
       scheduled depending on departure time instead of entry time at an area.


   .. py:attribute:: request_immediately
      :value: False

      

   .. py:method:: _action(vehicle)

      Generator function that characterizes the process. Subclasses must
      implement this method. It must catch the exception simpy.Interrupt and
      let it pass or implement custom follow-ups. If this method yields a
      timeout, the duration must be set as self.dur before the yield
      statement due to the determination of self.etc.


   .. py:method:: _pre(*args, **kwargs)

      Space for actions before calling self._pem that may not be possible
      upon init.


   .. py:method:: estimate_duration(dur, *args, **kwargs)
      :staticmethod:

      Return an estimate of the process duration in seconds based on given
      parameters as as if it could start immediately. Must be int, not float.
      Possible waiting time for resources are not considered. Therefore the
      estimate is reliable only if the process is started immediately. Static
      to be callable before instantiation.



