:py:mod:`depot.simulation`
==========================

.. py:module:: depot.simulation

.. autoapi-nested-parse::

   Initialization and hosting of a depot simulation.



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   depot.simulation.DepotHost
   depot.simulation.SimulationHost
   depot.simulation.BaseMultipleSimulationHost
   depot.simulation.SimulationStop



Functions
~~~~~~~~~

.. autoapisummary::

   depot.simulation.create_alternatives



Attributes
~~~~~~~~~~

.. autoapisummary::

   depot.simulation.Depotinput


.. py:class:: DepotHost(env, simulation_host)


   Host for one depot and its configurator in a simulation. Needs to be
   operated by a SimulationHost or a similar procedure.
   Attributes depot, configurator and evaluation are stable references.

   Parameters:
   simulation_host: [SimulationHost]

   Attributes:
   depot: related [Depot]
   configurator: [DepotConfigurator] of related depot
   evaluation: [DepotEvaluation] of related depot

   .. py:method:: load_and_complete_template(filename_template)

      Load depot template, validate and complete it.



.. py:class:: SimulationHost(to_simulate, run_progressbar=False, print_timestamps=True, tictocname='')


   Wrapper for one or more depots in one simulation run.
   Provides utilities to properly setup a simulation:
   - load eflips settings
   - Create simpy.env, a timetable and a vehicleGenerator
   - Create one or more DepotHost instances and related objects
   - Measure time
   - Run the simulation

   Makes it possible to start the simulation from an outside script.

   Parameters:
   to_simulate: [list] of Depotinput objects. Specifies the number of
       depots to simulate, their template and if a GUI should be shown. Based
       on this input, DepotHost instances are created.

       The parallel simulation of multiple depots has not been tested yet,
       therefore to_simulate must have only one entry.

   Attributes:
   tictoc: [eflips.helperFunctions.Tictoc] measures execution time
   env: [simpy.Environment]
   depot_hosts: [list] of DepotHost instances
   timetable: [eflips.depot.standalone.Timetable]
   vg: [eflips.depot.standalone.VehicleGenerator]

   .. py:property:: filename_eflips_settings


   .. py:method:: standard_setup(filename_eflips_settings, filename_timetable)

      Standard simulation setup without gui.


   .. py:method:: load_eflips_settings(filename)
      :staticmethod:

      Load eflips.globalConstants. Validate and complete it (required for
      the depot simulation).


   .. py:method:: load_timetable(filename)

      Load timetable data from excel and init a timetable.
      load_eflips_settings() must be called before this.


   .. py:method:: init_timetable(timetabledata)

      Use timetabledata to init a timetable.


   .. py:method:: complete()

      Complete the depot configuration phase. Must be called after
      loading a depot template/ configurating it and before simulation start.


   .. py:method:: run()

      Run the simulation. All depot configurations have to be complete.



.. py:data:: Depotinput

   Container for parameters for SimulationHost


.. py:function:: create_alternatives(basefilename, keypath, values)

   Create one or more json depot templates that vary by one attribute.
   Parameters:
   basefilename: [str] including path, excluding extension
   keypath: [list] of access keys
   values: [list] of value alternatives


.. py:class:: BaseMultipleSimulationHost(basefilename_eflips_settings, basefilename_timetable, basefilename_template, print_timestamps_total=True, tictocname_total='', print_timestamps_each=True, tictocname_each='')


   Bases: :py:obj:`abc.ABC`

   Base utilities for consecutively running multiple depot simulations.

   See usage demo in run_multiple_test.py

   history: [list] of tuples containing the filenames of the inputs of each
   simulation run.

   .. py:method:: run()

      Call to execute.


   .. py:method:: simulate(fn_es, fn_ti, fn_te)

      Execute one simulation and return its SimulationHost instance.


   .. py:method:: evaluate(depotsim)

      Do evaluation after a simulation run.


   .. py:method:: stop_criterion(depotsim)
      :abstractmethod:

      Return True if simulating should be stopped, else False.


   .. py:method:: next(depotsim, fn_es, fn_ti, fn_te)
      :abstractmethod:

      Call self.stop_criterion to decide on further actions. For alternating,
      create a new scenario to simulate based on the results of the previous
      run.
      Return a tuple of
          - return value of self.stop_criterion,
          --- fn_es, fn_ti, fn_te that may each point to another file than
              passed as parameter, possibly newly created.



.. py:class:: SimulationStop(env)


   Bases: :py:obj:`simpy.Event`

   Event for immediately terminating the simulation.

   .. py:method:: succeed(value=None)

      Same as simpy.Event.succeed() but with URGENT priority.
      Use value to e.g. supply a reason.



