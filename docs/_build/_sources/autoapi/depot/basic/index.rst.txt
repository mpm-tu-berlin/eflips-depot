:py:mod:`depot.basic`
=====================

.. py:module:: depot.basic

.. autoapi-nested-parse::

   A temporary file for eFLIPS-Depot API



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   depot.basic.InputForSimba



Functions
~~~~~~~~~

.. autoapisummary::

   depot.basic.init_simulation
   depot.basic.run_simulation
   depot.basic.to_simba



.. py:function:: init_simulation(fsettings, fschedule, ftemplate)

   Initialization of :class:`eflips.depot.simulation.SimulationHost`

   :param fsettings: Path of setting file (JSON)
   :type fsettings: str
   :param fschedule: Path of bus-schedule file (XML)
   :type fschedule: str
   :param ftemplate: Path of template file (JSON)
   :type ftemplate: str

   :return: A :class:`eflips.depot.simulation.SimulationHost`
   :rtype: :class:`eflips.depot.simulation.SimulationHost`


.. py:function:: run_simulation(simulation_host)

   Run simulation and return simulation results

   :param simulation_host: Simulation Host of eflips-depot
   :type simulation_host: :class:`eflips.depot.Simulation.SimulationHost`
   :return: Object of :class:`eflips.depot.Simulation.SimulationHost` storing simulation results
   :rtype: :class:`eflips.depot.Simulation.SimulationHost`


.. py:function:: to_simba(ev)

   Returns a list containing input data for simba

   :param ev: Object storing all simulation results
   :type ev: :class:`eflips.depot.evaluation.DepotEvaluation`
   :return: list of :class:`InputForSimba`
   :rtype: list


.. py:class:: InputForSimba


   Input Data for Simba

   :param rotation_id: ID of rotation
   :type rotation_id: int
   :param vehicle_id: ID of vehicle
   :type vehicle_id: str
   :param soc_departure: soc at departure of each vehicle
   :type soc_departure: float

   .. py:attribute:: rotation_id
      :type: int

      

   .. py:attribute:: vehicle_id
      :type: str

      

   .. py:attribute:: soc_departure
      :type: float

      


