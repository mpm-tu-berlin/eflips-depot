:py:mod:`depot.rating`
======================

.. py:module:: depot.rating

.. autoapi-nested-parse::

   Components to model multi criteria decision problems. Application for park- and
   dispatch strategies.



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   depot.rating.Rating
   depot.rating.BaseCriterion
   depot.rating.BufferPark
   depot.rating.TypestackPark
   depot.rating.RfdDiffPark
   depot.rating.AvailablePower
   depot.rating.EmptySlotsExitPark
   depot.rating.SlotAlternative
   depot.rating.ParkRating
   depot.rating.BufferDispatch
   depot.rating.TypestackDispatch
   depot.rating.RfdDiffDispatch
   depot.rating.EmptySlotsExitDispatch
   depot.rating.VehicleAlternative
   depot.rating.DispatchRating




Attributes
~~~~~~~~~~

.. autoapisummary::

   depot.rating.rfd_diff_park_lower_bound
   depot.rating.rfd_diff_park_upper_bound
   depot.rating.park_rating_weights
   depot.rating.rfd_diff_dispatch_upper_bound
   depot.rating.dispatch_rating_weights


.. py:data:: rfd_diff_park_lower_bound

   

.. py:data:: rfd_diff_park_upper_bound
   :value: 7200

   

.. py:data:: park_rating_weights

   

.. py:data:: rfd_diff_dispatch_upper_bound
   :value: 10800

   

.. py:data:: dispatch_rating_weights

   

.. py:class:: Rating(alternatives, weights=None)


   Data container with methods to solve multi criteria decision problems.

   Parameters:
   alternatives: [list or 2D numpy.ndarray] of lists that represent an
       alternative. Alternatives must contain numerical data and have the same
       length. Is converted to a 2D numpy.ndarray during init.
   weights: [list or 1D numpy.ndarray or None] of factors for weighting values
       of an alternative. Is converted to a 1D numpy.ndarray during init.

   Attributes:
   best_value: [int or float] the best value after solving.
   best_alternative_nos: [tuple] from np.where with the row indices of the
       best alternatives in alternatives. E.g.: (array([2], dtype=int64),)
   best_alternatives: [list] of the best alternatives.


   .. py:method:: check_input(alternatives, weights)
      :staticmethod:

      Check alternatives and weights for validity.


   .. py:method:: weighted_sum()

      Locate the maximum weighted sums in self.alternatives.



.. py:class:: BaseCriterion


   Bases: :py:obj:`abc.ABC`

   Base class for a criterion.
   Subclasses must implement attibute 'value' and method 'calculate'.


   .. py:method:: calculate(*args, **kwargs)
      :abstractmethod:

      Determine self.value from inputs.



.. py:class:: BufferPark(area, vehicle)


   Bases: :py:obj:`BaseCriterion`

   Criterion for ParkRating.
   Exclusive for Direct areas. Value is 0 for Line.


   .. py:method:: calculate(area, vehicle)

      Determine self.value from inputs.



.. py:class:: TypestackPark(area, vehicle)


   Bases: :py:obj:`BaseCriterion`

   Criterion for ParkRating.
   Exclusive for Line areas. Value is 0 for Direct.


   .. py:method:: calculate(area, vehicle)

      Determine self.value from inputs.



.. py:class:: RfdDiffPark(slot, vehicle)


   Bases: :py:obj:`BaseCriterion`

   Criterion for ParkRating.
   Exclusive for Line areas where *vehicle* would be blocked. Value is 0 for
   Direct.

   slot: [tuple] with items (area, index of slot)


   .. py:attribute:: lower_bound

      

   .. py:attribute:: upper_bound

      

   .. py:method:: calculate(slot, vehicle)

      Determine self.value from inputs.



.. py:class:: AvailablePower(slot, max_power)


   Bases: :py:obj:`BaseCriterion`

   Criterion for ParkRating and DispatchRating.
   For both Direct and Line areas.

   slot: [tuple] with items (area, index of slot)


   .. py:method:: calculate(slot, max_power)

      Determine self.value from inputs.



.. py:class:: EmptySlotsExitPark(area, max_capacity_line)


   Bases: :py:obj:`BaseCriterion`

   Criterion for ParkRating.
   Exclusive for Line areas. Value is 0 for Direct.


   .. py:method:: calculate(area, max_capacity_line)

      Determine self.value from inputs.



.. py:class:: SlotAlternative(slot, vehicle, max_power, max_capacity_line)


   Summary of criteria for one slot for ParkRating.

   slot: [tuple] with items (area, index of slot)
   vehicle: [SimpleVehicle]
   max_power: [int] maximum power in kW of all charging interfaces at parking
       areas
   max_capacity_line: [int or None] max capacity of Line parking areas



.. py:class:: ParkRating(alternatives_obj)


   Bases: :py:obj:`Rating`

   alternatives_obj: [list] of SlotAlternative instances


   .. py:attribute:: weights

      


.. py:class:: BufferDispatch(area, vehicle)


   Bases: :py:obj:`BaseCriterion`

   Criterion for DispatchRating.
   Exclusive for Direct areas. Value is 0 for Line.


   .. py:method:: calculate(area, vehicle)

      Determine self.value from inputs.



.. py:class:: TypestackDispatch(area)


   Bases: :py:obj:`BaseCriterion`

   Criterion for DispatchRating.
   Exclusive for Line areas. Value is 0 for Direct.


   .. py:method:: calculate(area)

      Determine self.value from inputs.



.. py:class:: RfdDiffDispatch(slot)


   Criterion for DispatchRating.
   Exclusive for Line areas. Value is 0 for Direct.

   slot: [tuple] with items (area, index of slot). Must contain a vehicle that
       is ready for departure, i.e. dwd.etc_processes returns
       eflips.EstimateValue.COMPLETED.


   .. py:attribute:: upper_bound

      

   .. py:method:: calculate(slot)


   .. py:method:: get_max_diff(slot)
      :staticmethod:

      Get the maximum of all etcs (estimated time of completion) of all
      vehicles at the area of *slot* and return it as [int].

      slot: [tuple] with items (area, index of slot)



.. py:class:: EmptySlotsExitDispatch(area, max_capacity_line)


   Bases: :py:obj:`BaseCriterion`

   Criterion for DispatchRating.
   Exclusive for Line areas. Value is 0 for Direct.


   .. py:method:: calculate(area, max_capacity_line)

      Determine self.value from inputs.



.. py:class:: VehicleAlternative(slot, vehicle, max_power, max_capacity_line)


   Summary of criteria for one vehicle for DispatchRating.

   slot: [tuple] with items (area, index of vehicle's slot)
   vehicle: [SimpleVehicle]
   max_power: [int] maximum power in kW of all charging interfaces at parking
       areas
   max_capacity_line: [int or None] max capacity of Line parking areas



.. py:class:: DispatchRating(alternatives_obj)


   Bases: :py:obj:`Rating`

   alternatives_obj: [list] of VehicleAlternative instances


   .. py:attribute:: weights

      


