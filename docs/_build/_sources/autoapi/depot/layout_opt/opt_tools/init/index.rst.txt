:py:mod:`depot.layout_opt.opt_tools.init`
=========================================

.. py:module:: depot.layout_opt.opt_tools.init

.. autoapi-nested-parse::

   Initializers for population and attributes. Related helpers and constraints.



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   depot.layout_opt.opt_tools.init.AreaPrototype
   depot.layout_opt.opt_tools.init.DSRPrototype
   depot.layout_opt.opt_tools.init.DSR_90Prototype
   depot.layout_opt.opt_tools.init.DDRPrototype
   depot.layout_opt.opt_tools.init.LinePrototype
   depot.layout_opt.opt_tools.init.DepotPrototype



Functions
~~~~~~~~~

.. autoapisummary::

   depot.layout_opt.opt_tools.init.get_capacity_max
   depot.layout_opt.opt_tools.init.get_count_max
   depot.layout_opt.opt_tools.init.get_count_max_with_capacity_max
   depot.layout_opt.opt_tools.init.get_count_max_with_capacity_min
   depot.layout_opt.opt_tools.init.print_area_precomps
   depot.layout_opt.opt_tools.init.init_random_area
   depot.layout_opt.opt_tools.init.clone_depot
   depot.layout_opt.opt_tools.init.init_random_depot
   depot.layout_opt.opt_tools.init._instantiate_areas



Attributes
~~~~~~~~~~

.. autoapisummary::

   depot.layout_opt.opt_tools.init.OTHER_AREA_TYPES
   depot.layout_opt.opt_tools.init.CAPACITY_MAX
   depot.layout_opt.opt_tools.init.COUNT_MAX
   depot.layout_opt.opt_tools.init.COUNT_MIN


.. py:function:: get_capacity_max(visu_class, capacity_min, limit=200)

   Determine an area type's maximum capacity within DEPOT_A, DEPOT_B (the
   b-dimension). Uses BinWithDistances.try_put as a lightweight packing test.
   Return the capacity [int] or None if not even the minimum fits.


.. py:function:: get_count_max(visu_class, capacity)

   Determine the maximum number of areas of *visu_class* with *capacity*
   within DEPOT_A, DEPOT_B. Return the count [int] or None if not even one
   area fits and the BinWithDistances object populated with the max count.


.. py:function:: get_count_max_with_capacity_max(visu_class, capacity_min)

   Determine the maximum number of areas of *visu_class* with maximum
   capacity within DEPOT_A, DEPOT_B (the a-dimension). Return the count [int]
   or None if not even one area fits and the BinWithDistances object populated
   with the max count.


.. py:function:: get_count_max_with_capacity_min(visu_class, capacity_min)

   Determine the maximum number of areas of *visu_class* with minimum
   capacity within DEPOT_A, DEPOT_B. Return the count [int] or None if not
   even one area fits and the BinWithDistances object populated with the max
   count.


.. py:class:: AreaPrototype(capacity)


   Bases: :py:obj:`abc.ABC`

   Abstract base class for a simple area representation.

   .. py:property:: visu


   .. py:attribute:: capacity_min

      

   .. py:attribute:: capacity_max

      

   .. py:attribute:: typename

      

   .. py:attribute:: visu_class

      

   .. py:method:: __repr__()

      Return repr(self).


   .. py:method:: to_other_type(other_type)

      Split self. into the least amount of area prototype objects of
      *other_type* with a total capacity of at least self.capacity. Return a
      list of the generated objects.

      other_type: type of other area prototype


   .. py:method:: clone()

      Return a new instance with same capacity and no visu.



.. py:class:: DSRPrototype(capacity)


   Bases: :py:obj:`AreaPrototype`

   Class for a simple DSR area representation.

   .. py:attribute:: capacity_min
      :value: 1

      

   .. py:attribute:: capacity_max

      

   .. py:attribute:: typename
      :value: 'DSR'

      

   .. py:attribute:: visu_class

      


.. py:class:: DSR_90Prototype(capacity)


   Bases: :py:obj:`AreaPrototype`

   Class for a simple DSR_90 area representation.

   .. py:attribute:: capacity_min
      :value: 1

      

   .. py:attribute:: capacity_max

      

   .. py:attribute:: typename
      :value: 'DSR_90'

      

   .. py:attribute:: visu_class

      


.. py:class:: DDRPrototype(capacity)


   Bases: :py:obj:`AreaPrototype`

   Class for a simple DDR area representation.

   .. py:attribute:: capacity_min
      :value: 2

      

   .. py:attribute:: capacity_max

      

   .. py:attribute:: typename
      :value: 'DDR'

      

   .. py:attribute:: visu_class

      


.. py:class:: LinePrototype(capacity)


   Bases: :py:obj:`AreaPrototype`

   Class for a simple Line area representation.

   .. py:attribute:: capacity_min
      :value: 2

      

   .. py:attribute:: capacity_max

      

   .. py:attribute:: typename
      :value: 'L'

      

   .. py:attribute:: visu_class

      


.. py:data:: OTHER_AREA_TYPES

   

.. py:data:: CAPACITY_MAX

   

.. py:data:: COUNT_MAX

   

.. py:data:: COUNT_MIN
   :value: 1

   

.. py:function:: print_area_precomps()


.. py:function:: init_random_area()

   Return a new area prototype of random type with random capacity within
   bounds.


.. py:class:: DepotPrototype


   Very basic depot representation.

   .. py:property:: visu


   .. py:property:: capacity

      Total parking area capacity.


   .. py:property:: ID

      Automatic ID based on self.areas.


   .. py:property:: ID_dm

      ID with DSR and DDR merged.


   .. py:method:: generate_ID()


   .. py:method:: generate_ID_dm()


   .. py:method:: sort_areas()


   .. py:method:: reset_results()

      Reset of evaluation results that is required after changes such as
      crossover and mutation.


   .. py:method:: __eq__(other)

      Return True if DepotPrototype objects *self* and *other* have the
      same areas.



.. py:function:: clone_depot(ind)

   Return a new DepotPrototype instance with cloned areas.
   As function and not method to be applicable with map.


.. py:function:: init_random_depot(dcls)

   Return a new DepotPrototype instance with a random amount of areas
   within bounds.


.. py:function:: _instantiate_areas()

   Instantiate all possible areas within slot capacity bounds.


